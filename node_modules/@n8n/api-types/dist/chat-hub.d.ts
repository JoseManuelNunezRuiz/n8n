import { z } from 'zod';
import { Z } from 'zod-class';
export declare const chatHubProviderSchema: z.ZodEnum<["openai", "anthropic", "google"]>;
export type ChatHubProvider = z.infer<typeof chatHubProviderSchema>;
export declare const PROVIDER_CREDENTIAL_TYPE_MAP: Record<ChatHubProvider, string>;
export declare const chatHubConversationModelSchema: z.ZodObject<{
    provider: z.ZodEnum<["openai", "anthropic", "google"]>;
    model: z.ZodString;
}, "strip", z.ZodTypeAny, {
    provider: "openai" | "anthropic" | "google";
    model: string;
}, {
    provider: "openai" | "anthropic" | "google";
    model: string;
}>;
export type ChatHubConversationModel = z.infer<typeof chatHubConversationModelSchema>;
export declare const chatModelsRequestSchema: z.ZodObject<{
    credentials: z.ZodRecord<z.ZodEnum<["openai", "anthropic", "google"]>, z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    credentials: Partial<Record<"openai" | "anthropic" | "google", string | null>>;
}, {
    credentials: Partial<Record<"openai" | "anthropic" | "google", string | null>>;
}>;
export type ChatModelsRequest = z.infer<typeof chatModelsRequestSchema>;
export type ChatModelsResponse = Record<ChatHubProvider, {
    models: Array<{
        name: string;
    }>;
    error?: string;
}>;
declare const ChatHubSendMessageRequest_base: Z.Class<{
    messageId: z.ZodString;
    sessionId: z.ZodString;
    message: z.ZodString;
    model: z.ZodObject<{
        provider: z.ZodEnum<["openai", "anthropic", "google"]>;
        model: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        provider: "openai" | "anthropic" | "google";
        model: string;
    }, {
        provider: "openai" | "anthropic" | "google";
        model: string;
    }>;
    credentials: z.ZodRecord<z.ZodString, z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
    }, {
        id: string;
        name: string;
    }>>;
}>;
export declare class ChatHubSendMessageRequest extends ChatHubSendMessageRequest_base {
}
export declare const chatHubMessageSchema: z.ZodObject<{
    id: z.ZodString;
    conversationId: z.ZodString;
    role: z.ZodEnum<["user", "assistant"]>;
    content: z.ZodString;
    createdAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    conversationId: string;
    role: "user" | "assistant";
    content: string;
    createdAt: string;
}, {
    id: string;
    conversationId: string;
    role: "user" | "assistant";
    content: string;
    createdAt: string;
}>;
export type ChatHubMessage = z.infer<typeof chatHubMessageSchema>;
export declare const chatHubConversationSchema: z.ZodObject<{
    id: z.ZodString;
    title: z.ZodString;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    createdAt: string;
    title: string;
    updatedAt: string;
}, {
    id: string;
    createdAt: string;
    title: string;
    updatedAt: string;
}>;
export type ChatHubConversation = z.infer<typeof chatHubConversationSchema>;
export declare const chatHubConversationsResponseSchema: z.ZodArray<z.ZodObject<{
    id: z.ZodString;
    title: z.ZodString;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    createdAt: string;
    title: string;
    updatedAt: string;
}, {
    id: string;
    createdAt: string;
    title: string;
    updatedAt: string;
}>, "many">;
export type ChatHubConversationsResponse = z.infer<typeof chatHubConversationsResponseSchema>;
export declare const chatHubMessagesResponseSchema: z.ZodArray<z.ZodObject<{
    id: z.ZodString;
    conversationId: z.ZodString;
    role: z.ZodEnum<["user", "assistant"]>;
    content: z.ZodString;
    createdAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    conversationId: string;
    role: "user" | "assistant";
    content: string;
    createdAt: string;
}, {
    id: string;
    conversationId: string;
    role: "user" | "assistant";
    content: string;
    createdAt: string;
}>, "many">;
export type ChatHubMessagesResponse = z.infer<typeof chatHubMessagesResponseSchema>;
export {};
