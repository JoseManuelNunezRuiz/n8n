"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dataTableColumnValueSchema = exports.dateTimeSchema = exports.dataTableSchema = exports.dataTableColumnSchema = exports.dataTableCreateColumnSchema = exports.dataTableColumnTypeSchema = exports.dataTableColumnNameSchema = exports.DATA_TABLE_COLUMN_ERROR_MESSAGE = exports.DATA_TABLE_COLUMN_MAX_LENGTH = exports.DATA_TABLE_COLUMN_REGEX = exports.dataTableIdSchema = exports.dataTableNameSchema = exports.insertRowReturnType = void 0;
const zod_1 = require("zod");
exports.insertRowReturnType = zod_1.z.union([zod_1.z.literal('all'), zod_1.z.literal('count'), zod_1.z.literal('id')]);
exports.dataTableNameSchema = zod_1.z.string().trim().min(1).max(128);
exports.dataTableIdSchema = zod_1.z.string().max(36);
exports.DATA_TABLE_COLUMN_REGEX = /^[a-zA-Z][a-zA-Z0-9_]*$/;
exports.DATA_TABLE_COLUMN_MAX_LENGTH = 63;
exports.DATA_TABLE_COLUMN_ERROR_MESSAGE = 'Only alphabetical characters and non-leading numbers and underscores are allowed for column names, and the maximum length is 63 characters.';
exports.dataTableColumnNameSchema = zod_1.z
    .string()
    .trim()
    .min(1)
    .max(exports.DATA_TABLE_COLUMN_MAX_LENGTH)
    .regex(exports.DATA_TABLE_COLUMN_REGEX, exports.DATA_TABLE_COLUMN_ERROR_MESSAGE);
exports.dataTableColumnTypeSchema = zod_1.z.enum(['string', 'number', 'boolean', 'date']);
exports.dataTableCreateColumnSchema = zod_1.z.object({
    name: exports.dataTableColumnNameSchema,
    type: exports.dataTableColumnTypeSchema,
    index: zod_1.z.number().optional(),
});
exports.dataTableColumnSchema = exports.dataTableCreateColumnSchema.extend({
    dataTableId: exports.dataTableIdSchema,
});
exports.dataTableSchema = zod_1.z.object({
    id: exports.dataTableIdSchema,
    name: exports.dataTableNameSchema,
    columns: zod_1.z.array(exports.dataTableColumnSchema),
    createdAt: zod_1.z.string().datetime(),
    updatedAt: zod_1.z.string().datetime(),
});
exports.dateTimeSchema = zod_1.z
    .string()
    .datetime({ offset: true })
    .transform((s) => new Date(s))
    .pipe(zod_1.z.date());
exports.dataTableColumnValueSchema = zod_1.z.union([
    zod_1.z.string(),
    zod_1.z.number(),
    zod_1.z.boolean(),
    zod_1.z.null(),
    zod_1.z.date(),
]);
//# sourceMappingURL=data-table.schema.js.map