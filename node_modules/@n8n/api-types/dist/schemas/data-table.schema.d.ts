import { z } from 'zod';
import type { ListDataTableQueryDto } from '../dto';
export declare const insertRowReturnType: z.ZodUnion<[z.ZodLiteral<"all">, z.ZodLiteral<"count">, z.ZodLiteral<"id">]>;
export declare const dataTableNameSchema: z.ZodString;
export declare const dataTableIdSchema: z.ZodString;
export declare const DATA_TABLE_COLUMN_REGEX: RegExp;
export declare const DATA_TABLE_COLUMN_MAX_LENGTH = 63;
export declare const DATA_TABLE_COLUMN_ERROR_MESSAGE = "Only alphabetical characters and non-leading numbers and underscores are allowed for column names, and the maximum length is 63 characters.";
export declare const dataTableColumnNameSchema: z.ZodString;
export declare const dataTableColumnTypeSchema: z.ZodEnum<["string", "number", "boolean", "date"]>;
export declare const dataTableCreateColumnSchema: z.ZodObject<{
    name: z.ZodString;
    type: z.ZodEnum<["string", "number", "boolean", "date"]>;
    index: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "string" | "number" | "boolean" | "date";
    name: string;
    index?: number | undefined;
}, {
    type: "string" | "number" | "boolean" | "date";
    name: string;
    index?: number | undefined;
}>;
export type DataTableCreateColumnSchema = z.infer<typeof dataTableCreateColumnSchema>;
export declare const dataTableColumnSchema: z.ZodObject<{
    name: z.ZodString;
    type: z.ZodEnum<["string", "number", "boolean", "date"]>;
    index: z.ZodOptional<z.ZodNumber>;
} & {
    dataTableId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "string" | "number" | "boolean" | "date";
    name: string;
    dataTableId: string;
    index?: number | undefined;
}, {
    type: "string" | "number" | "boolean" | "date";
    name: string;
    dataTableId: string;
    index?: number | undefined;
}>;
export declare const dataTableSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    columns: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        type: z.ZodEnum<["string", "number", "boolean", "date"]>;
        index: z.ZodOptional<z.ZodNumber>;
    } & {
        dataTableId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "string" | "number" | "boolean" | "date";
        name: string;
        dataTableId: string;
        index?: number | undefined;
    }, {
        type: "string" | "number" | "boolean" | "date";
        name: string;
        dataTableId: string;
        index?: number | undefined;
    }>, "many">;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    createdAt: string;
    updatedAt: string;
    columns: {
        type: "string" | "number" | "boolean" | "date";
        name: string;
        dataTableId: string;
        index?: number | undefined;
    }[];
}, {
    id: string;
    name: string;
    createdAt: string;
    updatedAt: string;
    columns: {
        type: "string" | "number" | "boolean" | "date";
        name: string;
        dataTableId: string;
        index?: number | undefined;
    }[];
}>;
export type DataTable = z.infer<typeof dataTableSchema>;
export type DataTableColumn = z.infer<typeof dataTableColumnSchema>;
export type DataTableListFilter = {
    id?: string | string[];
    projectId?: string | string[];
    name?: string;
};
export type DataTableListOptions = Partial<ListDataTableQueryDto> & {
    filter: {
        projectId: string;
    };
};
export declare const dateTimeSchema: z.ZodPipeline<z.ZodEffects<z.ZodString, Date, string>, z.ZodDate>;
export declare const dataTableColumnValueSchema: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodDate]>;
