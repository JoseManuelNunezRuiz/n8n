{"version":3,"sources":["../../../../../../nodes/vendors/Ollama/actions/image/analyze.operation.ts"],"sourcesContent":["import type { IExecuteFunctions, INodeExecutionData, INodeProperties } from 'n8n-workflow';\nimport { updateDisplayOptions } from 'n8n-workflow';\n\nimport type { OllamaChatResponse, OllamaMessage } from '../../helpers';\nimport { apiRequest } from '../../transport';\nimport { modelRLC } from '../descriptions';\n\nconst properties: INodeProperties[] = [\n\tmodelRLC,\n\t{\n\t\tdisplayName: 'Text Input',\n\t\tname: 'text',\n\t\ttype: 'string',\n\t\tplaceholder: \"e.g. What's in this image?\",\n\t\tdefault: \"What's in this image?\",\n\t\ttypeOptions: {\n\t\t\trows: 2,\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Input Type',\n\t\tname: 'inputType',\n\t\ttype: 'options',\n\t\tdefault: 'binary',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Binary File(s)',\n\t\t\t\tvalue: 'binary',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Image URL(s)',\n\t\t\t\tvalue: 'url',\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tdisplayName: 'Input Data Field Name(s)',\n\t\tname: 'binaryPropertyName',\n\t\ttype: 'string',\n\t\tdefault: 'data',\n\t\tplaceholder: 'e.g. data',\n\t\thint: 'The name of the input field containing the binary file data to be processed',\n\t\tdescription:\n\t\t\t'Name of the binary field(s) which contains the image(s), separate multiple field names with commas',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tinputType: ['binary'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'URL(s)',\n\t\tname: 'imageUrls',\n\t\ttype: 'string',\n\t\tplaceholder: 'e.g. https://example.com/image.png',\n\t\tdescription: 'URL(s) of the image(s) to analyze, multiple URLs can be added separated by comma',\n\t\tdefault: '',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tinputType: ['url'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Simplify Output',\n\t\tname: 'simplify',\n\t\ttype: 'boolean',\n\t\tdefault: true,\n\t\tdescription: 'Whether to simplify the response or not',\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\tplaceholder: 'Add Option',\n\t\ttype: 'collection',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'System Message',\n\t\t\t\tname: 'system',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'e.g. You are a helpful assistant.',\n\t\t\t\tdescription: 'System message to set the context for the conversation',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\trows: 2,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Temperature',\n\t\t\t\tname: 'temperature',\n\t\t\t\ttype: 'number',\n\t\t\t\tdefault: 0.8,\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tminValue: 0,\n\t\t\t\t\tmaxValue: 2,\n\t\t\t\t\tnumberPrecision: 2,\n\t\t\t\t},\n\t\t\t\tdescription: 'Controls randomness in responses. Lower values make output more focused.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Output Randomness (Top P)',\n\t\t\t\tname: 'top_p',\n\t\t\t\tdefault: 0.7,\n\t\t\t\tdescription: 'The maximum cumulative probability of tokens to consider when sampling',\n\t\t\t\ttype: 'number',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tminValue: 0,\n\t\t\t\t\tmaxValue: 1,\n\t\t\t\t\tnumberPrecision: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Top K',\n\t\t\t\tname: 'top_k',\n\t\t\t\ttype: 'number',\n\t\t\t\tdefault: 40,\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tminValue: 1,\n\t\t\t\t},\n\t\t\t\tdescription: 'Controls diversity by limiting the number of top tokens to consider',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Max Tokens',\n\t\t\t\tname: 'num_predict',\n\t\t\t\ttype: 'number',\n\t\t\t\tdefault: 1024,\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tminValue: 1,\n\t\t\t\t\tnumberPrecision: 0,\n\t\t\t\t},\n\t\t\t\tdescription: 'Maximum number of tokens to generate in the completion',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Frequency Penalty',\n\t\t\t\tname: 'frequency_penalty',\n\t\t\t\ttype: 'number',\n\t\t\t\tdefault: 0.0,\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tminValue: 0,\n\t\t\t\t\tnumberPrecision: 2,\n\t\t\t\t},\n\t\t\t\tdescription:\n\t\t\t\t\t'Adjusts the penalty for tokens that have already appeared in the generated text. Higher values discourage repetition.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Presence Penalty',\n\t\t\t\tname: 'presence_penalty',\n\t\t\t\ttype: 'number',\n\t\t\t\tdefault: 0.0,\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tnumberPrecision: 2,\n\t\t\t\t},\n\t\t\t\tdescription:\n\t\t\t\t\t'Adjusts the penalty for tokens based on their presence in the generated text so far. Positive values penalize tokens that have already appeared, encouraging diversity.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Repetition Penalty',\n\t\t\t\tname: 'repeat_penalty',\n\t\t\t\ttype: 'number',\n\t\t\t\tdefault: 1.1,\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tminValue: 0,\n\t\t\t\t\tnumberPrecision: 2,\n\t\t\t\t},\n\t\t\t\tdescription:\n\t\t\t\t\t'Sets how strongly to penalize repetitions. A higher value (e.g., 1.5) will penalize repetitions more strongly, while a lower value (e.g., 0.9) will be more lenient.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Context Length',\n\t\t\t\tname: 'num_ctx',\n\t\t\t\ttype: 'number',\n\t\t\t\tdefault: 4096,\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tminValue: 1,\n\t\t\t\t\tnumberPrecision: 0,\n\t\t\t\t},\n\t\t\t\tdescription: 'Sets the size of the context window used to generate the next token',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Repeat Last N',\n\t\t\t\tname: 'repeat_last_n',\n\t\t\t\ttype: 'number',\n\t\t\t\tdefault: 64,\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tminValue: -1,\n\t\t\t\t\tnumberPrecision: 0,\n\t\t\t\t},\n\t\t\t\tdescription:\n\t\t\t\t\t'Sets how far back for the model to look back to prevent repetition. (0 = disabled, -1 = num_ctx).',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Min P',\n\t\t\t\tname: 'min_p',\n\t\t\t\ttype: 'number',\n\t\t\t\tdefault: 0.0,\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tminValue: 0,\n\t\t\t\t\tmaxValue: 1,\n\t\t\t\t\tnumberPrecision: 3,\n\t\t\t\t},\n\t\t\t\tdescription:\n\t\t\t\t\t'Alternative to the top_p, and aims to ensure a balance of quality and variety. The parameter p represents the minimum probability for a token to be considered, relative to the probability of the most likely token.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Seed',\n\t\t\t\tname: 'seed',\n\t\t\t\ttype: 'number',\n\t\t\t\tdefault: 0,\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tminValue: 0,\n\t\t\t\t\tnumberPrecision: 0,\n\t\t\t\t},\n\t\t\t\tdescription:\n\t\t\t\t\t'Sets the random number seed to use for generation. Setting this to a specific number will make the model generate the same text for the same prompt.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Stop Sequences',\n\t\t\t\tname: 'stop',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription:\n\t\t\t\t\t'Sets the stop sequences to use. When this pattern is encountered the LLM will stop generating text and return. Separate multiple patterns with commas',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Keep Alive',\n\t\t\t\tname: 'keep_alive',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '5m',\n\t\t\t\tdescription:\n\t\t\t\t\t'Specifies the duration to keep the loaded model in memory after use. Format: 1h30m (1 hour 30 minutes).',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Low VRAM Mode',\n\t\t\t\tname: 'low_vram',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether to activate low VRAM mode, which reduces memory usage at the cost of slower generation speed. Useful for GPUs with limited memory.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Main GPU ID',\n\t\t\t\tname: 'main_gpu',\n\t\t\t\ttype: 'number',\n\t\t\t\tdefault: 0,\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tminValue: 0,\n\t\t\t\t\tnumberPrecision: 0,\n\t\t\t\t},\n\t\t\t\tdescription:\n\t\t\t\t\t'Specifies the ID of the GPU to use for the main computation. Only change this if you have multiple GPUs.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Context Batch Size',\n\t\t\t\tname: 'num_batch',\n\t\t\t\ttype: 'number',\n\t\t\t\tdefault: 512,\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tminValue: 1,\n\t\t\t\t\tnumberPrecision: 0,\n\t\t\t\t},\n\t\t\t\tdescription:\n\t\t\t\t\t'Sets the batch size for prompt processing. Larger batch sizes may improve generation speed but increase memory usage.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Number of GPUs',\n\t\t\t\tname: 'num_gpu',\n\t\t\t\ttype: 'number',\n\t\t\t\tdefault: -1,\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tminValue: -1,\n\t\t\t\t\tnumberPrecision: 0,\n\t\t\t\t},\n\t\t\t\tdescription:\n\t\t\t\t\t'Specifies the number of GPUs to use for parallel processing. Set to -1 for auto-detection.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Number of CPU Threads',\n\t\t\t\tname: 'num_thread',\n\t\t\t\ttype: 'number',\n\t\t\t\tdefault: 0,\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tminValue: 0,\n\t\t\t\t\tnumberPrecision: 0,\n\t\t\t\t},\n\t\t\t\tdescription:\n\t\t\t\t\t'Specifies the number of CPU threads to use for processing. Set to 0 for auto-detection.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Penalize Newlines',\n\t\t\t\tname: 'penalize_newline',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: true,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether the model will be less likely to generate newline characters, encouraging longer continuous sequences of text',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Use Memory Locking',\n\t\t\t\tname: 'use_mlock',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether to lock the model in memory to prevent swapping. This can improve performance but requires sufficient available memory.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Use Memory Mapping',\n\t\t\t\tname: 'use_mmap',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: true,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether to use memory mapping for loading the model. This can reduce memory usage but may impact performance.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Load Vocabulary Only',\n\t\t\t\tname: 'vocab_only',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether to only load the model vocabulary without the weights. Useful for quickly testing tokenization.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Output Format',\n\t\t\t\tname: 'format',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{ name: 'Default', value: '' },\n\t\t\t\t\t{ name: 'JSON', value: 'json' },\n\t\t\t\t],\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'Specifies the format of the API response',\n\t\t\t},\n\t\t],\n\t},\n];\n\ninterface MessageOptions {\n\tsystem?: string;\n\ttemperature?: number;\n\ttop_p?: number;\n\ttop_k?: number;\n\tnum_predict?: number;\n\tfrequency_penalty?: number;\n\tpresence_penalty?: number;\n\trepeat_penalty?: number;\n\tnum_ctx?: number;\n\trepeat_last_n?: number;\n\tmin_p?: number;\n\tseed?: number;\n\tstop?: string | string[];\n\tlow_vram?: boolean;\n\tmain_gpu?: number;\n\tnum_batch?: number;\n\tnum_gpu?: number;\n\tnum_thread?: number;\n\tpenalize_newline?: boolean;\n\tuse_mlock?: boolean;\n\tuse_mmap?: boolean;\n\tvocab_only?: boolean;\n\tformat?: string;\n\tkeep_alive?: string;\n}\n\nconst displayOptions = {\n\tshow: {\n\t\toperation: ['analyze'],\n\t\tresource: ['image'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(this: IExecuteFunctions, i: number): Promise<INodeExecutionData[]> {\n\tconst model = this.getNodeParameter('modelId', i, '', { extractValue: true }) as string;\n\tconst inputType = this.getNodeParameter('inputType', i, 'binary') as string;\n\tconst text = this.getNodeParameter('text', i, '') as string;\n\tconst simplify = this.getNodeParameter('simplify', i, true) as boolean;\n\tconst options = this.getNodeParameter('options', i, {}) as MessageOptions;\n\n\tlet images: string[];\n\n\tif (inputType === 'url') {\n\t\tconst urls = this.getNodeParameter('imageUrls', i, '') as string;\n\t\tconst urlList = urls\n\t\t\t.split(',')\n\t\t\t.map((url) => url.trim())\n\t\t\t.filter((url) => url);\n\n\t\t// For URL inputs, we need to download and convert to base64\n\t\tconst imagePromises = urlList.map(async (url) => {\n\t\t\tconst response = (await this.helpers.httpRequest({\n\t\t\t\tmethod: 'GET',\n\t\t\t\turl,\n\t\t\t\tencoding: 'arraybuffer',\n\t\t\t})) as Buffer;\n\t\t\treturn response.toString('base64');\n\t\t});\n\n\t\timages = await Promise.all(imagePromises);\n\t} else {\n\t\tconst binaryPropertyNames = this.getNodeParameter('binaryPropertyName', i, 'data');\n\t\tconst propertyNames = binaryPropertyNames\n\t\t\t.split(',')\n\t\t\t.map((name: string) => name.trim())\n\t\t\t.filter((name: string) => name);\n\n\t\tconst imagePromises = propertyNames.map(async (binaryPropertyName: string) => {\n\t\t\tconst buffer = await this.helpers.getBinaryDataBuffer(i, binaryPropertyName);\n\t\t\treturn buffer.toString('base64');\n\t\t});\n\n\t\timages = await Promise.all(imagePromises);\n\t}\n\n\tconst messages: OllamaMessage[] = [\n\t\t{\n\t\t\trole: 'user',\n\t\t\tcontent: text,\n\t\t\timages,\n\t\t},\n\t];\n\n\tconst processedOptions = { ...options };\n\tif (processedOptions.stop && typeof processedOptions.stop === 'string') {\n\t\tprocessedOptions.stop = processedOptions.stop\n\t\t\t.split(',')\n\t\t\t.map((s: string) => s.trim())\n\t\t\t.filter(Boolean);\n\t}\n\n\tconst body = {\n\t\tmodel,\n\t\tmessages,\n\t\tstream: false,\n\t\toptions: processedOptions,\n\t};\n\n\tconst response: OllamaChatResponse = await apiRequest.call(this, 'POST', '/api/chat', {\n\t\tbody,\n\t});\n\n\tif (simplify) {\n\t\treturn [\n\t\t\t{\n\t\t\t\tjson: { content: response.message.content },\n\t\t\t\tpairedItem: { item: i },\n\t\t\t},\n\t\t];\n\t}\n\n\treturn [\n\t\t{\n\t\t\tjson: { ...response },\n\t\t\tpairedItem: { item: i },\n\t\t},\n\t];\n}\n"],"mappings":"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","names":["response"]}