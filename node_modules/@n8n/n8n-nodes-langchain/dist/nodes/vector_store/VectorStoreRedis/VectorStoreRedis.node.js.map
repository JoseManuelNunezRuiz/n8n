{"version":3,"sources":["../../../../nodes/vector_store/VectorStoreRedis/VectorStoreRedis.node.ts"],"sourcesContent":["import type { EmbeddingsInterface } from '@langchain/core/embeddings';\nimport { RedisVectorStore } from '@langchain/redis';\nimport type { RedisVectorStoreConfig } from '@langchain/redis/dist/vectorstores';\nimport {\n\ttype IExecuteFunctions,\n\ttype ILoadOptionsFunctions,\n\ttype INodeProperties,\n\ttype ISupplyDataFunctions,\n\tNodeOperationError,\n} from 'n8n-workflow';\nimport type { RedisClientOptions } from 'redis';\nimport { createClient } from 'redis';\n\nimport { createVectorStoreNode } from '../shared/createVectorStoreNode/createVectorStoreNode';\n\n/**\n * Constants for the name of the credentials and Node parameters.\n */\nconst REDIS_CREDENTIALS = 'redis';\nconst REDIS_INDEX_NAME = 'redisIndex';\nconst REDIS_KEY_PREFIX = 'keyPrefix';\nconst REDIS_OVERWRITE_DOCUMENTS = 'overwriteDocuments';\nconst REDIS_METADATA_KEY = 'metadataKey';\nconst REDIS_METADATA_FILTER = 'metadataFilter';\nconst REDIS_CONTENT_KEY = 'contentKey';\nconst REDIS_EMBEDDING_KEY = 'vectorKey';\nconst REDIS_TTL = 'ttl';\n\nconst redisIndexRLC: INodeProperties = {\n\tdisplayName: 'Redis Index',\n\tname: REDIS_INDEX_NAME,\n\ttype: 'resourceLocator',\n\tdefault: { mode: 'list', value: '' },\n\trequired: true,\n\tmodes: [\n\t\t{\n\t\t\tdisplayName: 'From List',\n\t\t\tname: 'list',\n\t\t\ttype: 'list',\n\t\t\ttypeOptions: {\n\t\t\t\tsearchListMethod: 'redisIndexSearch',\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'ID',\n\t\t\tname: 'id',\n\t\t\ttype: 'string',\n\t\t},\n\t],\n};\n\nconst metadataFilterField: INodeProperties = {\n\tdisplayName: 'Metadata Filter',\n\tname: REDIS_METADATA_FILTER,\n\ttype: 'string',\n\tdescription:\n\t\t'The comma-separated list of words by which to apply additional full-text metadata filtering',\n\tplaceholder: 'Item1,Item2,Item3',\n\tdefault: '',\n};\n\nconst metadataKeyField: INodeProperties = {\n\tdisplayName: 'Metadata Key',\n\tname: REDIS_METADATA_KEY,\n\ttype: 'string',\n\tdescription: 'The hash key to be used to store the metadata of the document',\n\tplaceholder: 'metadata',\n\tdefault: '',\n};\n\nconst contentKeyField: INodeProperties = {\n\tdisplayName: 'Content Key',\n\tname: REDIS_CONTENT_KEY,\n\ttype: 'string',\n\tdescription: 'The hash key to be used to store the content of the document',\n\tplaceholder: 'content',\n\tdefault: '',\n};\n\nconst embeddingKeyField: INodeProperties = {\n\tdisplayName: 'Embedding Key',\n\tname: REDIS_EMBEDDING_KEY,\n\ttype: 'string',\n\tdescription: 'The hash key to be used to store the embedding of the document',\n\tplaceholder: 'content_vector',\n\tdefault: '',\n};\n\nconst overwriteDocuments: INodeProperties = {\n\tdisplayName: 'Overwrite Documents',\n\tname: REDIS_OVERWRITE_DOCUMENTS,\n\ttype: 'boolean',\n\tdescription: 'Whether existing documents and the index should be overwritten',\n\tdefault: false,\n};\n\nconst keyPrefixField: INodeProperties = {\n\tdisplayName: 'Key Prefix',\n\tname: REDIS_KEY_PREFIX,\n\ttype: 'string',\n\tdescription: 'Prefix for Redis keys storing the documents',\n\tplaceholder: 'doc',\n\tdefault: '',\n};\n\nconst ttlField: INodeProperties = {\n\tdisplayName: 'Time-To-Live',\n\tname: REDIS_TTL,\n\tdescription: 'Time-to-live for the documents in seconds',\n\tplaceholder: '0',\n\ttype: 'number',\n\tdefault: '',\n};\n\nconst sharedFields: INodeProperties[] = [redisIndexRLC];\n\nconst insertFields: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add Option',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\tkeyPrefixField,\n\t\t\toverwriteDocuments,\n\t\t\tmetadataKeyField,\n\t\t\tcontentKeyField,\n\t\t\tembeddingKeyField,\n\t\t\tttlField,\n\t\t],\n\t},\n];\n\nconst retrieveFields: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add Option',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\tmetadataFilterField,\n\t\t\tkeyPrefixField,\n\t\t\tmetadataKeyField,\n\t\t\tcontentKeyField,\n\t\t\tembeddingKeyField,\n\t\t],\n\t},\n];\n\nexport const redisConfig = {\n\tclient: null as ReturnType<typeof createClient> | null,\n\tconnectionString: '',\n};\n\n/**\n * Type used for cleaner, more intentional typing.\n */\ntype IFunctionsContext = IExecuteFunctions | ISupplyDataFunctions | ILoadOptionsFunctions;\n\n/**\n * Get the Redis client.\n * @param context - The context.\n * @returns the Redis client for the node.\n */\nexport async function getRedisClient(context: IFunctionsContext) {\n\tconst credentials = await context.getCredentials(REDIS_CREDENTIALS);\n\n\t// Create client configuration object\n\tconst config: RedisClientOptions = {\n\t\tsocket: {\n\t\t\thost: (credentials.host as string) || 'localhost',\n\t\t\tport: (credentials.port as number) || 6379,\n\t\t\ttls: credentials.ssl === true,\n\t\t},\n\t\tusername: credentials.user as string,\n\t\tpassword: credentials.password as string,\n\t\tdatabase: credentials.database as number,\n\t\tclientInfoTag: 'n8n',\n\t};\n\n\tif (!redisConfig.client || redisConfig.connectionString !== JSON.stringify(config)) {\n\t\tif (redisConfig.client) {\n\t\t\tawait redisConfig.client.disconnect();\n\t\t}\n\n\t\tredisConfig.connectionString = JSON.stringify(config);\n\t\tredisConfig.client = createClient(config);\n\n\t\tif (redisConfig.client) {\n\t\t\tredisConfig.client.on('error', (error: Error) => {\n\t\t\t\tcontext.logger.error(`[Redis client] ${error.message}`, { error });\n\t\t\t});\n\n\t\t\tawait redisConfig.client.connect();\n\t\t}\n\t}\n\n\treturn redisConfig.client;\n}\n\n/**\n * Type guard to check if a value is a string array.\n * @param value - The value to check.\n * @returns True if the value is a string array, false otherwise.\n */\nfunction isStringArray(value: unknown): value is string[] {\n\treturn Array.isArray(value) && value.every((item) => typeof item === 'string');\n}\n\n/**\n * Get the complete list of indexes from Redis.\n * @returns The list of indexes.\n */\nexport async function listIndexes(this: ILoadOptionsFunctions) {\n\tconst client = await getRedisClient(this);\n\n\tif (client === null) {\n\t\treturn { results: [] };\n\t}\n\n\ttry {\n\t\t// Get all indexes using FT._LIST command\n\t\tconst indexes = await client.ft._list();\n\n\t\t// Validate that indexes is actually a string array\n\t\tif (!isStringArray(indexes)) {\n\t\t\tthis.logger.warn('FT._LIST returned unexpected data type');\n\t\t\treturn { results: [] };\n\t\t}\n\n\t\tconst results = indexes.map((index) => ({\n\t\t\tname: index,\n\t\t\tvalue: index,\n\t\t}));\n\n\t\treturn { results };\n\t} catch (error) {\n\t\tthis.logger.info('Failed to get Redis indexes: ' + error.message);\n\t\treturn { results: [] };\n\t}\n}\n\n/**\n * Get a parameter from the context.\n * @param key - The key of the parameter.\n * @param context - The context.\n * @param itemIndex - The index.\n * @returns The value.\n */\nexport function getParameter(key: string, context: IFunctionsContext, itemIndex: number): string {\n\treturn context.getNodeParameter(key, itemIndex, '', {\n\t\textractValue: true,\n\t}) as string;\n}\n\n/**\n * Get a parameter from the context as a number.\n * @param key - The key of the parameter.\n * @param context - The context.\n * @param itemIndex - The index.\n * @returns The value.\n */\nexport function getParameterAsNumber(\n\tkey: string,\n\tcontext: IFunctionsContext,\n\titemIndex: number,\n): number {\n\treturn context.getNodeParameter(key, itemIndex, '', {\n\t\textractValue: true,\n\t}) as number;\n}\n\n/**\n * Extended RedisVectorStore class to handle custom filtering.\n *\n * This wrapper is necessary because when used as a retriever, the similaritySearchVectorWithScore should\n * use a processed filter\n */\nclass ExtendedRedisVectorSearch extends RedisVectorStore {\n\tdefaultFilter?: string[];\n\n\tconstructor(embeddings: EmbeddingsInterface, options: RedisVectorStoreConfig, filter?: string[]) {\n\t\tsuper(embeddings, options);\n\t\tthis.defaultFilter = filter;\n\t}\n\n\tasync similaritySearchVectorWithScore(query: number[], k: number) {\n\t\treturn await super.similaritySearchVectorWithScore(query, k, this.defaultFilter);\n\t}\n}\n\nconst getIndexName = getParameter.bind(null, REDIS_INDEX_NAME);\nconst getKeyPrefix = getParameter.bind(null, `options.${REDIS_KEY_PREFIX}`);\nconst getOverwrite = getParameter.bind(null, `options.${REDIS_OVERWRITE_DOCUMENTS}`);\nconst getContentKey = getParameter.bind(null, `options.${REDIS_CONTENT_KEY}`);\nconst getMetadataFilter = getParameter.bind(null, `options.${REDIS_METADATA_FILTER}`);\nconst getMetadataKey = getParameter.bind(null, `options.${REDIS_METADATA_KEY}`);\nconst getEmbeddingKey = getParameter.bind(null, `options.${REDIS_EMBEDDING_KEY}`);\nconst getTtl = getParameterAsNumber.bind(null, `options.${REDIS_TTL}`);\n\nexport class VectorStoreRedis extends createVectorStoreNode({\n\tmeta: {\n\t\tdisplayName: 'Redis Vector Store',\n\t\tname: 'vectorStoreRedis',\n\t\tdescription: 'Work with your data in a Redis vector index',\n\t\ticon: { light: 'file:redis.svg', dark: 'file:redis.dark.svg' },\n\t\tdocsUrl:\n\t\t\t'https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoreredis/',\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: REDIS_CREDENTIALS,\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\toperationModes: ['load', 'insert', 'retrieve', 'update', 'retrieve-as-tool'],\n\t},\n\tmethods: { listSearch: { redisIndexSearch: listIndexes } },\n\tretrieveFields,\n\tloadFields: retrieveFields,\n\tinsertFields,\n\tsharedFields,\n\tasync getVectorStoreClient(context, _filter, embeddings, itemIndex) {\n\t\tconst client = await getRedisClient(context);\n\t\tconst indexField = getIndexName(context, itemIndex).trim();\n\t\tconst keyPrefixField = getKeyPrefix(context, itemIndex).trim();\n\t\tconst metadataField = getMetadataKey(context, itemIndex).trim();\n\t\tconst contentField = getContentKey(context, itemIndex).trim();\n\t\tconst embeddingField = getEmbeddingKey(context, itemIndex).trim();\n\t\tconst filter = getMetadataFilter(context, itemIndex).trim();\n\n\t\tif (client === null) {\n\t\t\tthrow new NodeOperationError(context.getNode(), 'Redis client not initialized', {\n\t\t\t\titemIndex,\n\t\t\t\tdescription: 'Please check your Redis connection details',\n\t\t\t});\n\t\t}\n\n\t\t// Check if index exists by trying to get info about it\n\t\ttry {\n\t\t\tawait client.ft.info(indexField);\n\t\t} catch (error) {\n\t\t\tthrow new NodeOperationError(context.getNode(), `Index ${indexField} not found`, {\n\t\t\t\titemIndex,\n\t\t\t\tdescription: 'Please check that the index exists in your Redis instance',\n\t\t\t});\n\t\t}\n\n\t\t// Process filter: split by comma, trim, and remove empty strings\n\t\t// If no valid filter terms exist, pass undefined instead of empty array\n\t\tconst filterTerms = filter\n\t\t\t? filter\n\t\t\t\t\t.split(',')\n\t\t\t\t\t.map((s) => s.trim())\n\t\t\t\t\t.filter((s) => s)\n\t\t\t: [];\n\n\t\treturn new ExtendedRedisVectorSearch(\n\t\t\tembeddings,\n\t\t\t{\n\t\t\t\tredisClient: client,\n\t\t\t\tindexName: indexField,\n\t\t\t\t...(keyPrefixField ? { keyPrefix: keyPrefixField } : {}),\n\t\t\t\t...(metadataField ? { metadataKey: metadataField } : {}),\n\t\t\t\t...(contentField ? { contentKey: contentField } : {}),\n\t\t\t\t...(embeddingField ? { vectorKey: embeddingField } : {}),\n\t\t\t},\n\t\t\tfilterTerms.length > 0 ? filterTerms : undefined,\n\t\t);\n\t},\n\tasync populateVectorStore(context, embeddings, documents, itemIndex) {\n\t\tconst client = await getRedisClient(context);\n\n\t\tif (client === null) {\n\t\t\tthrow new NodeOperationError(context.getNode(), 'Redis client not initialized', {\n\t\t\t\titemIndex,\n\t\t\t\tdescription: 'Please check your Redis connection details',\n\t\t\t});\n\t\t}\n\n\t\ttry {\n\t\t\tconst indexField = getIndexName(context, itemIndex).trim();\n\t\t\tconst overwrite = getOverwrite(context, itemIndex);\n\t\t\tconst keyPrefixField = getKeyPrefix(context, itemIndex).trim();\n\t\t\tconst metadataField = getMetadataKey(context, itemIndex).trim();\n\t\t\tconst contentField = getContentKey(context, itemIndex).trim();\n\t\t\tconst embeddingField = getEmbeddingKey(context, itemIndex).trim();\n\t\t\tconst ttl = getTtl(context, itemIndex);\n\n\t\t\tif (overwrite) {\n\t\t\t\tawait client.ft.dropIndex(indexField, { DD: true });\n\t\t\t}\n\n\t\t\tawait ExtendedRedisVectorSearch.fromDocuments(documents, embeddings, {\n\t\t\t\tredisClient: client,\n\t\t\t\tindexName: indexField,\n\t\t\t\t...(keyPrefixField ? { keyPrefix: keyPrefixField } : {}),\n\t\t\t\t...(metadataField ? { metadataKey: metadataField } : {}),\n\t\t\t\t...(contentField ? { contentKey: contentField } : {}),\n\t\t\t\t...(embeddingField ? { vectorKey: embeddingField } : {}),\n\t\t\t\t...(ttl ? { ttl } : {}),\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tcontext.logger.info(`Error while populating the store: ${error.message}`);\n\t\t\tthrow new NodeOperationError(context.getNode(), `Error: ${error.message}`, {\n\t\t\t\titemIndex,\n\t\t\t\tdescription: 'Please check your index/schema and parameters',\n\t\t\t});\n\t\t}\n\t},\n}) {}\n"],"mappings":"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","names":["import_redis","keyPrefixField"]}