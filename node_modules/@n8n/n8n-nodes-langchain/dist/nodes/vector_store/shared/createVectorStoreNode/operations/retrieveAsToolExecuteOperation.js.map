{"version":3,"sources":["../../../../../../nodes/vector_store/shared/createVectorStoreNode/operations/retrieveAsToolExecuteOperation.ts"],"sourcesContent":["import type { Embeddings } from '@langchain/core/embeddings';\nimport type { BaseDocumentCompressor } from '@langchain/core/retrievers/document_compressors';\nimport type { VectorStore } from '@langchain/core/vectorstores';\nimport {\n\tassertParamIsBoolean,\n\tassertParamIsNumber,\n\tNodeConnectionTypes,\n\ttype IExecuteFunctions,\n\ttype INodeExecutionData,\n} from 'n8n-workflow';\n\nimport { getMetadataFiltersValues, logAiEvent } from '@utils/helpers';\n\nimport type { VectorStoreNodeConstructorArgs } from '../types';\n\n/**\n * Handles the 'retrieve-as-tool' operation mode in execute context\n * Searches the vector store for documents similar to a query and returns execution data\n * This is similar to the load operation but designed to work with the new tool execution pattern\n */\nexport async function handleRetrieveAsToolExecuteOperation<T extends VectorStore = VectorStore>(\n\tcontext: IExecuteFunctions,\n\targs: VectorStoreNodeConstructorArgs<T>,\n\tembeddings: Embeddings,\n\titemIndex: number,\n): Promise<INodeExecutionData[]> {\n\tconst filter = getMetadataFiltersValues(context, itemIndex);\n\tconst vectorStore = await args.getVectorStoreClient(\n\t\tcontext,\n\t\t// We'll pass filter to similaritySearchVectorWithScore instead of getVectorStoreClient\n\t\tundefined,\n\t\tembeddings,\n\t\titemIndex,\n\t);\n\n\ttry {\n\t\t// Get the search parameters - query from input data, others from node parameters\n\t\tconst inputData = context.getInputData();\n\t\tconst item = inputData[itemIndex];\n\t\tconst query = typeof item.json.input === 'string' ? item.json.input : undefined;\n\n\t\tif (!query || typeof query !== 'string') {\n\t\t\tthrow new Error('Input data must contain a \"input\" field with the search query');\n\t\t}\n\n\t\tconst topK = context.getNodeParameter('topK', itemIndex, 4);\n\t\tassertParamIsNumber('topK', topK, context.getNode());\n\t\tconst useReranker = context.getNodeParameter('useReranker', itemIndex, false);\n\t\tassertParamIsBoolean('useReranker', useReranker, context.getNode());\n\n\t\tconst includeDocumentMetadata = context.getNodeParameter(\n\t\t\t'includeDocumentMetadata',\n\t\t\titemIndex,\n\t\t\ttrue,\n\t\t);\n\t\tassertParamIsBoolean('includeDocumentMetadata', includeDocumentMetadata, context.getNode());\n\n\t\t// Embed the query to prepare for vector similarity search\n\t\tconst embeddedQuery = await embeddings.embedQuery(query);\n\n\t\t// Get the most similar documents to the embedded query\n\t\tlet docs = await vectorStore.similaritySearchVectorWithScore(embeddedQuery, topK, filter);\n\n\t\t// If reranker is used, rerank the documents\n\t\tif (useReranker && docs.length > 0) {\n\t\t\tconst reranker = (await context.getInputConnectionData(\n\t\t\t\tNodeConnectionTypes.AiReranker,\n\t\t\t\t0,\n\t\t\t)) as BaseDocumentCompressor;\n\t\t\tconst documents = docs.map(([doc]) => doc);\n\n\t\t\tconst rerankedDocuments = await reranker.compressDocuments(documents, query);\n\t\t\tdocs = rerankedDocuments.map((doc) => {\n\t\t\t\tconst { relevanceScore, ...metadata } = doc.metadata || {};\n\t\t\t\treturn [{ ...doc, metadata }, relevanceScore ?? 0];\n\t\t\t});\n\t\t}\n\n\t\t// Format the documents for the output similar to the original tool format\n\t\tconst serializedDocs = docs.map(([doc]) => {\n\t\t\tif (includeDocumentMetadata) {\n\t\t\t\treturn {\n\t\t\t\t\ttype: 'text',\n\t\t\t\t\ttext: JSON.stringify({ ...doc }),\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn {\n\t\t\t\t\ttype: 'text',\n\t\t\t\t\tpageContent: JSON.stringify({ pageContent: doc.pageContent }),\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\n\t\t// Log the AI event for analytics\n\t\tlogAiEvent(context, 'ai-vector-store-searched', { input: query });\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tjson: {\n\t\t\t\t\tresponse: serializedDocs,\n\t\t\t\t},\n\t\t\t\tpairedItem: {\n\t\t\t\t\titem: itemIndex,\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\t} finally {\n\t\t// Release the vector store client if a release method was provided\n\t\targs.releaseVectorStoreClient?.(vectorStore);\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,0BAMO;AAEP,qBAAqD;AASrD,eAAsB,qCACrB,SACA,MACA,YACA,WACgC;AAChC,QAAM,aAAS,yCAAyB,SAAS,SAAS;AAC1D,QAAM,cAAc,MAAM,KAAK;AAAA,IAC9B;AAAA;AAAA,IAEA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AAEA,MAAI;AAEH,UAAM,YAAY,QAAQ,aAAa;AACvC,UAAM,OAAO,UAAU,SAAS;AAChC,UAAM,QAAQ,OAAO,KAAK,KAAK,UAAU,WAAW,KAAK,KAAK,QAAQ;AAEtE,QAAI,CAAC,SAAS,OAAO,UAAU,UAAU;AACxC,YAAM,IAAI,MAAM,+DAA+D;AAAA,IAChF;AAEA,UAAM,OAAO,QAAQ,iBAAiB,QAAQ,WAAW,CAAC;AAC1D,iDAAoB,QAAQ,MAAM,QAAQ,QAAQ,CAAC;AACnD,UAAM,cAAc,QAAQ,iBAAiB,eAAe,WAAW,KAAK;AAC5E,kDAAqB,eAAe,aAAa,QAAQ,QAAQ,CAAC;AAElE,UAAM,0BAA0B,QAAQ;AAAA,MACvC;AAAA,MACA;AAAA,MACA;AAAA,IACD;AACA,kDAAqB,2BAA2B,yBAAyB,QAAQ,QAAQ,CAAC;AAG1F,UAAM,gBAAgB,MAAM,WAAW,WAAW,KAAK;AAGvD,QAAI,OAAO,MAAM,YAAY,gCAAgC,eAAe,MAAM,MAAM;AAGxF,QAAI,eAAe,KAAK,SAAS,GAAG;AACnC,YAAM,WAAY,MAAM,QAAQ;AAAA,QAC/B,wCAAoB;AAAA,QACpB;AAAA,MACD;AACA,YAAM,YAAY,KAAK,IAAI,CAAC,CAAC,GAAG,MAAM,GAAG;AAEzC,YAAM,oBAAoB,MAAM,SAAS,kBAAkB,WAAW,KAAK;AAC3E,aAAO,kBAAkB,IAAI,CAAC,QAAQ;AACrC,cAAM,EAAE,gBAAgB,GAAG,SAAS,IAAI,IAAI,YAAY,CAAC;AACzD,eAAO,CAAC,EAAE,GAAG,KAAK,SAAS,GAAG,kBAAkB,CAAC;AAAA,MAClD,CAAC;AAAA,IACF;AAGA,UAAM,iBAAiB,KAAK,IAAI,CAAC,CAAC,GAAG,MAAM;AAC1C,UAAI,yBAAyB;AAC5B,eAAO;AAAA,UACN,MAAM;AAAA,UACN,MAAM,KAAK,UAAU,EAAE,GAAG,IAAI,CAAC;AAAA,QAChC;AAAA,MACD,OAAO;AACN,eAAO;AAAA,UACN,MAAM;AAAA,UACN,aAAa,KAAK,UAAU,EAAE,aAAa,IAAI,YAAY,CAAC;AAAA,QAC7D;AAAA,MACD;AAAA,IACD,CAAC;AAGD,mCAAW,SAAS,4BAA4B,EAAE,OAAO,MAAM,CAAC;AAEhE,WAAO;AAAA,MACN;AAAA,QACC,MAAM;AAAA,UACL,UAAU;AAAA,QACX;AAAA,QACA,YAAY;AAAA,UACX,MAAM;AAAA,QACP;AAAA,MACD;AAAA,IACD;AAAA,EACD,UAAE;AAED,SAAK,2BAA2B,WAAW;AAAA,EAC5C;AACD;","names":[]}