"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyOperations = applyOperations;
exports.processOperations = processOperations;
function applyClearOperation(_workflow, _operation) {
    return { nodes: [], connections: {}, name: '' };
}
function applyRemoveNodeOperation(workflow, operation) {
    if (operation.type !== 'removeNode')
        return workflow;
    const nodesToRemove = new Set(operation.nodeIds);
    const nodes = workflow.nodes.filter((node) => !nodesToRemove.has(node.id));
    const cleanedConnections = {};
    for (const [sourceId, nodeConnections] of Object.entries(workflow.connections)) {
        if (!nodesToRemove.has(sourceId)) {
            cleanedConnections[sourceId] = {};
            for (const [connectionType, outputs] of Object.entries(nodeConnections)) {
                if (Array.isArray(outputs)) {
                    cleanedConnections[sourceId][connectionType] = outputs.map((outputConnections) => {
                        if (Array.isArray(outputConnections)) {
                            return outputConnections.filter((conn) => !nodesToRemove.has(conn.node));
                        }
                        return outputConnections;
                    });
                }
            }
        }
    }
    return {
        ...workflow,
        nodes,
        connections: cleanedConnections,
    };
}
function applyAddNodesOperation(workflow, operation) {
    if (operation.type !== 'addNodes')
        return workflow;
    const nodeMap = new Map();
    workflow.nodes.forEach((node) => nodeMap.set(node.id, node));
    operation.nodes.forEach((node) => {
        nodeMap.set(node.id, node);
    });
    return {
        ...workflow,
        nodes: Array.from(nodeMap.values()),
    };
}
function applyUpdateNodeOperation(workflow, operation) {
    if (operation.type !== 'updateNode')
        return workflow;
    const nodes = workflow.nodes.map((node) => {
        if (node.id === operation.nodeId) {
            return { ...node, ...operation.updates };
        }
        return node;
    });
    return {
        ...workflow,
        nodes,
    };
}
function applySetConnectionsOperation(workflow, operation) {
    if (operation.type !== 'setConnections')
        return workflow;
    return {
        ...workflow,
        connections: operation.connections,
    };
}
function applyMergeConnectionsOperation(workflow, operation) {
    if (operation.type !== 'mergeConnections')
        return workflow;
    const connections = { ...workflow.connections };
    for (const [sourceId, nodeConnections] of Object.entries(operation.connections)) {
        if (!connections[sourceId]) {
            connections[sourceId] = nodeConnections;
        }
        else {
            for (const [connectionType, newOutputs] of Object.entries(nodeConnections)) {
                if (!connections[sourceId][connectionType]) {
                    connections[sourceId][connectionType] = newOutputs;
                }
                else {
                    const existingOutputs = connections[sourceId][connectionType];
                    if (Array.isArray(newOutputs) && Array.isArray(existingOutputs)) {
                        for (let i = 0; i < Math.max(newOutputs.length, existingOutputs.length); i++) {
                            if (!newOutputs[i])
                                continue;
                            if (!existingOutputs[i]) {
                                existingOutputs[i] = newOutputs[i];
                            }
                            else if (Array.isArray(newOutputs[i]) && Array.isArray(existingOutputs[i])) {
                                const existingSet = new Set(existingOutputs[i].map((conn) => JSON.stringify({ node: conn.node, type: conn.type, index: conn.index })));
                                newOutputs[i].forEach((conn) => {
                                    const connStr = JSON.stringify({
                                        node: conn.node,
                                        type: conn.type,
                                        index: conn.index,
                                    });
                                    if (!existingSet.has(connStr)) {
                                        existingOutputs[i].push(conn);
                                    }
                                });
                            }
                        }
                    }
                }
            }
        }
    }
    return {
        ...workflow,
        connections,
    };
}
function applyRemoveConnectionOperation(workflow, operation) {
    if (operation.type !== 'removeConnection')
        return workflow;
    const { sourceNode, targetNode, connectionType, sourceOutputIndex, targetInputIndex } = operation;
    const connections = { ...workflow.connections };
    if (!connections[sourceNode]) {
        return workflow;
    }
    const connectionTypeOutputs = connections[sourceNode][connectionType];
    if (!connectionTypeOutputs || !Array.isArray(connectionTypeOutputs)) {
        return workflow;
    }
    if (sourceOutputIndex >= connectionTypeOutputs.length ||
        !connectionTypeOutputs[sourceOutputIndex]) {
        return workflow;
    }
    const outputConnections = connectionTypeOutputs[sourceOutputIndex];
    if (!Array.isArray(outputConnections)) {
        return workflow;
    }
    const filteredConnections = outputConnections.filter((conn) => !(conn.node === targetNode &&
        conn.type === connectionType &&
        conn.index === targetInputIndex));
    connectionTypeOutputs[sourceOutputIndex] = filteredConnections;
    if (filteredConnections.length === 0) {
        const hasAnyConnections = connectionTypeOutputs.some((outputs) => Array.isArray(outputs) && outputs.length > 0);
        if (!hasAnyConnections) {
            delete connections[sourceNode][connectionType];
            if (Object.keys(connections[sourceNode]).length === 0) {
                delete connections[sourceNode];
            }
        }
    }
    return {
        ...workflow,
        connections,
    };
}
function applySetNameOperation(workflow, operation) {
    if (operation.type !== 'setName')
        return workflow;
    return {
        ...workflow,
        name: operation.name,
    };
}
const operationHandlers = {
    clear: applyClearOperation,
    removeNode: applyRemoveNodeOperation,
    addNodes: applyAddNodesOperation,
    updateNode: applyUpdateNodeOperation,
    setConnections: applySetConnectionsOperation,
    mergeConnections: applyMergeConnectionsOperation,
    removeConnection: applyRemoveConnectionOperation,
    setName: applySetNameOperation,
};
function applyOperations(workflow, operations) {
    let result = {
        nodes: [...workflow.nodes],
        connections: { ...workflow.connections },
        name: workflow.name || '',
    };
    for (const operation of operations) {
        const handler = operationHandlers[operation.type];
        result = handler(result, operation);
    }
    return result;
}
function processOperations(state) {
    const { workflowJSON, workflowOperations } = state;
    if (!workflowOperations || workflowOperations.length === 0) {
        return {};
    }
    const newWorkflow = applyOperations(workflowJSON, workflowOperations);
    return {
        workflowJSON: newWorkflow,
        workflowOperations: null,
    };
}
//# sourceMappingURL=operations-processor.js.map