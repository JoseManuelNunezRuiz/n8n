{"version":3,"sources":["../browser/src/driver/DriverFactory.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,kBAAkB,EAAE,MAAM,6BAA6B,CAAA;AAEhE,MAAM,SAAS,GAAG,KAAK,EACnB,IAAmC,EACT,EAAE;IAC5B,QAAQ,IAAI,EAAE,CAAC;QACX,KAAK,OAAO,CAAC;QACb,KAAK,SAAS;YACV,OAAO,CAAC,MAAM,MAAM,CAAC,qBAAqB,CAAC,CAAC,CAAC,WAAW,CAAA;QAC5D,KAAK,UAAU;YACX,OAAO,CAAC,MAAM,MAAM,CAAC,2BAA2B,CAAC,CAAC,CAAC,cAAc,CAAA;QACrE,KAAK,QAAQ;YACT,OAAO,CAAC,MAAM,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC,YAAY,CAAA;QAC/D,KAAK,eAAe;YAChB,OAAO,CAAC,MAAM,MAAM,CAAC,uCAAuC,CAAC,CAAC;iBACzD,qBAAqB,CAAA;QAC9B;YACI,MAAM,IAAI,kBAAkB,CAAC,IAAI,EAAE;gBAC/B,SAAS;gBACT,OAAO;gBACP,UAAU;gBACV,QAAQ;gBACR,eAAe;aAClB,CAAC,CAAA;IACV,CAAC;AACL,CAAC,CAAA;AAED;;GAEG;AACH,MAAM,OAAO,aAAa;IACtB;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,UAAsB;QACtC,MAAM,EAAE,IAAI,EAAE,GAAG,UAAU,CAAC,OAAO,CAAA;QACnC,OAAO,IAAI,CAAC,MAAM,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,CAAA;IAClD,CAAC;CACJ","file":"DriverFactory.js","sourcesContent":["import type { Driver, DriverConstructor } from \"./Driver\"\nimport type { DataSource } from \"../data-source/DataSource\"\nimport { MissingDriverError } from \"../error/MissingDriverError\"\n\nconst getDriver = async (\n    type: DataSource[\"options\"][\"type\"],\n): Promise<DriverConstructor> => {\n    switch (type) {\n        case \"mysql\":\n        case \"mariadb\":\n            return (await import(\"./mysql/MysqlDriver\")).MysqlDriver\n        case \"postgres\":\n            return (await import(\"./postgres/PostgresDriver\")).PostgresDriver\n        case \"sqlite\":\n            return (await import(\"./sqlite/SqliteDriver\")).SqliteDriver\n        case \"sqlite-pooled\":\n            return (await import(\"./sqlite-pooled/SqliteReadWriteDriver\"))\n                .SqliteReadWriteDriver\n        default:\n            throw new MissingDriverError(type, [\n                \"mariadb\",\n                \"mysql\",\n                \"postgres\",\n                \"sqlite\",\n                \"sqlite-pooled\",\n            ])\n    }\n}\n\n/**\n * Helps to create drivers.\n */\nexport class DriverFactory {\n    /**\n     * Creates a new driver depend on a given connection's driver type.\n     */\n    static async create(connection: DataSource): Promise<Driver> {\n        const { type } = connection.options\n        return new (await getDriver(type))(connection)\n    }\n}\n"],"sourceRoot":".."}