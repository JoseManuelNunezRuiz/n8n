"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createWorkflowDetailsTool = void 0;
exports.getWorkflowDetails = getWorkflowDetails;
const n8n_workflow_1 = require("n8n-workflow");
const zod_1 = __importDefault(require("zod"));
const schemas_1 = require("./schemas");
const webhook_utils_1 = require("./webhook-utils");
const inputSchema = {
    workflowId: zod_1.default.string().describe('The ID of the workflow to retrieve'),
};
const outputSchema = schemas_1.workflowDetailsOutputSchema.shape;
const createWorkflowDetailsTool = (user, baseWebhookUrl, workflowFinderService, credentialsService, endpoints) => {
    return {
        name: 'get_workflow_details',
        config: {
            description: 'Get detailed information about a specific workflow including trigger details',
            inputSchema,
            outputSchema,
        },
        handler: async ({ workflowId }) => {
            const payload = await getWorkflowDetails(user, baseWebhookUrl, workflowFinderService, credentialsService, endpoints, { workflowId });
            return {
                content: [{ type: 'text', text: JSON.stringify(payload) }],
                structuredContent: payload,
            };
        },
    };
};
exports.createWorkflowDetailsTool = createWorkflowDetailsTool;
async function getWorkflowDetails(user, baseWebhookUrl, workflowFinderService, credentialsService, endpoints, { workflowId }) {
    const workflow = await workflowFinderService.findWorkflowForUser(workflowId, user, [
        'workflow:read',
    ]);
    if (!workflow || workflow.isArchived || !workflow.settings?.availableInMCP) {
        throw new n8n_workflow_1.UserError('Workflow not found');
    }
    const webhooks = workflow.nodes.filter((node) => node.type === n8n_workflow_1.WEBHOOK_NODE_TYPE && node.disabled !== true);
    let triggerNotice = await (0, webhook_utils_1.getWebhookDetails)(user, webhooks, baseWebhookUrl, credentialsService, endpoints);
    triggerNotice += `${workflow.active
        ? '\n- Workflow is active and accessible. Use the production path for live traffic; the test path remains available when listening for test events in the editor. n8n Webhooks nodes do not have information about required request payloads, so ask the user if that cannot be inferred from the workflow.'
        : '\n- Workflow is not active. Click "Listen for test event" in the editor and use the test path; activate the workflow to make the production path available.'}`;
    const sanitizedWorkflow = {
        id: workflow.id,
        name: workflow.name,
        active: workflow.active,
        isArchived: workflow.isArchived,
        versionId: workflow.versionId,
        triggerCount: workflow.triggerCount,
        createdAt: workflow.createdAt.toISOString(),
        updatedAt: workflow.updatedAt.toISOString(),
        settings: workflow.settings ?? null,
        connections: workflow.connections,
        nodes: workflow.nodes.map(({ credentials: _credentials, ...node }) => node),
        tags: (workflow.tags ?? []).map((tag) => ({ id: tag.id, name: tag.name })),
        meta: workflow.meta ?? null,
        parentFolderId: workflow.parentFolder?.id ?? null,
    };
    return { workflow: sanitizedWorkflow, triggerInfo: triggerNotice };
}
//# sourceMappingURL=get-workflow-details.tool.js.map