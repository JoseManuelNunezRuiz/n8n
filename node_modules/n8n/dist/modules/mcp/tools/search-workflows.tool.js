"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSearchWorkflowsTool = void 0;
exports.searchWorkflows = searchWorkflows;
const zod_1 = __importDefault(require("zod"));
const schemas_1 = require("./schemas");
const MAX_RESULTS = 200;
const inputSchema = {
    limit: zod_1.default
        .number()
        .int()
        .positive()
        .max(MAX_RESULTS)
        .optional()
        .describe(`Limit the number of results (max ${MAX_RESULTS})`),
    active: zod_1.default.boolean().optional().describe('Filter by active status'),
    name: zod_1.default.string().optional().describe('Filter by name'),
    projectId: zod_1.default.string().optional(),
};
const outputSchema = {
    data: zod_1.default
        .array(zod_1.default.object({
        id: zod_1.default.string(),
        name: zod_1.default.string().nullable(),
        active: zod_1.default.boolean().nullable(),
        createdAt: zod_1.default.string().nullable(),
        updatedAt: zod_1.default.string().nullable(),
        triggerCount: zod_1.default.number().nullable(),
        nodes: zod_1.default.array(schemas_1.nodeSchema),
    }))
        .describe('List of workflows matching the query'),
    count: zod_1.default.number().int().min(0).describe('Total number of workflows that match the filters'),
};
const createSearchWorkflowsTool = (user, workflowService) => {
    return {
        name: 'search_workflows',
        config: {
            description: 'Search for workflows with optional filters. Returns a preview of each workflow.',
            inputSchema,
            outputSchema,
        },
        handler: async ({ limit = MAX_RESULTS, active, name, projectId }) => {
            const payload = await searchWorkflows(user, workflowService, {
                limit,
                active,
                name,
                projectId,
            });
            return {
                structuredContent: payload,
                content: [
                    {
                        type: 'text',
                        text: JSON.stringify(payload),
                    },
                ],
            };
        },
    };
};
exports.createSearchWorkflowsTool = createSearchWorkflowsTool;
async function searchWorkflows(user, workflowService, { limit = MAX_RESULTS, active, name, projectId }) {
    const safeLimit = Math.min(Math.max(1, limit), MAX_RESULTS);
    const options = {
        take: safeLimit,
        filter: {
            isArchived: false,
            availableInMCP: true,
            ...(active !== undefined ? { active } : {}),
            ...(name ? { name } : {}),
            ...(projectId ? { projectId } : {}),
        },
        select: {
            id: true,
            name: true,
            active: true,
            createdAt: true,
            updatedAt: true,
            triggerCount: true,
            nodes: true,
        },
    };
    const { workflows, count } = await workflowService.getMany(user, options, false, false, false);
    const formattedWorkflows = workflows.map(({ id, name, active, createdAt, updatedAt, triggerCount, nodes }) => ({
        id,
        name,
        active,
        createdAt: createdAt.toISOString(),
        updatedAt: updatedAt.toISOString(),
        triggerCount,
        nodes: (nodes ?? []).map((node) => ({ name: node.name, type: node.type })),
    }));
    return { data: formattedWorkflows, count };
}
//# sourceMappingURL=search-workflows.tool.js.map