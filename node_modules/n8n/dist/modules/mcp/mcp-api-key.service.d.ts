import { ApiKey, ApiKeyRepository, User, UserRepository } from '@n8n/db';
import { EntityManager } from '@n8n/typeorm';
import { NextFunction, Response, Request } from 'express';
import { JwtService } from '../../services/jwt.service';
export declare class McpServerApiKeyService {
    private readonly apiKeyRepository;
    private readonly jwtService;
    private readonly userRepository;
    constructor(apiKeyRepository: ApiKeyRepository, jwtService: JwtService, userRepository: UserRepository);
    createMcpServerApiKey(user: User, trx?: EntityManager): Promise<ApiKey>;
    findServerApiKeyForUser(user: User, { redact }?: {
        redact?: boolean | undefined;
    }): Promise<ApiKey | null>;
    private getUserForApiKey;
    deleteAllMcpApiKeysForUser(user: User, trx?: EntityManager): Promise<void>;
    private redactApiKey;
    private extractAPIKeyFromHeader;
    getAuthMiddleware(): (req: Request, res: Response, next: NextFunction) => Promise<void>;
    private responseWithUnauthorized;
    getOrCreateApiKey(user: User): Promise<ApiKey>;
    rotateMcpServerApiKey(user: User): Promise<ApiKey>;
}
