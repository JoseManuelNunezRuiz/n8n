"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.McpController = void 0;
const streamableHttp_js_1 = require("@modelcontextprotocol/sdk/server/streamableHttp.js");
const decorators_1 = require("@n8n/decorators");
const di_1 = require("@n8n/di");
const n8n_core_1 = require("n8n-core");
const mcp_api_key_service_1 = require("./mcp-api-key.service");
const mcp_service_1 = require("./mcp.service");
const mcp_settings_service_1 = require("./mcp.settings.service");
const getAuthMiddleware = () => di_1.Container.get(mcp_api_key_service_1.McpServerApiKeyService).getAuthMiddleware();
let McpController = class McpController {
    constructor(errorReporter, mcpService, mcpSettingsService) {
        this.errorReporter = errorReporter;
        this.mcpService = mcpService;
        this.mcpSettingsService = mcpSettingsService;
    }
    async build(req, res) {
        const enabled = await this.mcpSettingsService.getEnabled();
        if (!enabled) {
            res.status(403).json({ message: 'MCP access is disabled' });
            return;
        }
        try {
            const server = this.mcpService.getServer(req.user);
            const transport = new streamableHttp_js_1.StreamableHTTPServerTransport({
                sessionIdGenerator: undefined,
            });
            res.on('close', () => {
                void transport.close();
                void server.close();
            });
            await server.connect(transport);
            await transport.handleRequest(req, res, req.body);
        }
        catch (error) {
            this.errorReporter.error(error);
            if (!res.headersSent) {
                res.status(500).json({
                    jsonrpc: '2.0',
                    error: {
                        code: -32603,
                        message: 'Internal server error',
                    },
                    id: null,
                });
            }
        }
    }
};
exports.McpController = McpController;
__decorate([
    (0, decorators_1.Post)('/http', {
        rateLimit: { limit: 100 },
        middlewares: [getAuthMiddleware()],
        skipAuth: true,
        usesTemplates: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], McpController.prototype, "build", null);
exports.McpController = McpController = __decorate([
    (0, decorators_1.RootLevelController)('/mcp-server'),
    __metadata("design:paramtypes", [n8n_core_1.ErrorReporter,
        mcp_service_1.McpService,
        mcp_settings_service_1.McpSettingsService])
], McpController);
//# sourceMappingURL=mcp.controller.js.map