import { AddDataTableRowsDto, AddDataTableColumnDto, CreateDataTableDto, DeleteDataTableRowsDto, ListDataTableContentQueryDto, ListDataTableQueryDto, MoveDataTableColumnDto, UpdateDataTableDto, UpdateDataTableRowDto, UpsertDataTableRowDto } from '@n8n/api-types';
import { AuthenticatedRequest } from '@n8n/db';
import { DataTableRowReturn } from 'n8n-workflow';
import { DataTableService } from './data-table.service';
export declare class DataTableController {
    private readonly dataTableService;
    constructor(dataTableService: DataTableService);
    createDataTable(req: AuthenticatedRequest<{
        projectId: string;
    }>, _res: Response, dto: CreateDataTableDto): Promise<import("./data-table.entity").DataTable>;
    listProjectDataTables(req: AuthenticatedRequest<{
        projectId: string;
    }>, _res: Response, payload: ListDataTableQueryDto): Promise<{
        count: number;
        data: import("./data-table.entity").DataTable[];
    }>;
    updateDataTable(req: AuthenticatedRequest<{
        projectId: string;
    }>, _res: Response, dataTableId: string, dto: UpdateDataTableDto): Promise<boolean>;
    deleteDataTable(req: AuthenticatedRequest<{
        projectId: string;
    }>, _res: Response, dataTableId: string): Promise<boolean>;
    getColumns(req: AuthenticatedRequest<{
        projectId: string;
    }>, _res: Response, dataTableId: string): Promise<import("./data-table-column.entity").DataTableColumn[]>;
    addColumn(req: AuthenticatedRequest<{
        projectId: string;
    }>, _res: Response, dataTableId: string, dto: AddDataTableColumnDto): Promise<import("./data-table-column.entity").DataTableColumn>;
    deleteColumn(req: AuthenticatedRequest<{
        projectId: string;
    }>, _res: Response, dataTableId: string, columnId: string): Promise<boolean>;
    moveColumn(req: AuthenticatedRequest<{
        projectId: string;
    }>, _res: Response, dataTableId: string, columnId: string, dto: MoveDataTableColumnDto): Promise<boolean>;
    getDataTableRows(req: AuthenticatedRequest<{
        projectId: string;
    }>, _res: Response, dataTableId: string, dto: ListDataTableContentQueryDto): Promise<{
        count: number;
        data: import("n8n-workflow").DataTableRowsReturn;
    }>;
    appendDataTableRows<T extends DataTableRowReturn | undefined>(req: AuthenticatedRequest<{
        projectId: string;
    }>, _res: Response, dataTableId: string, dto: AddDataTableRowsDto & {
        returnType?: T;
    }): Promise<Array<T extends true ? DataTableRowReturn : Pick<DataTableRowReturn, 'id'>>>;
    upsertDataTableRow(req: AuthenticatedRequest<{
        projectId: string;
    }>, _res: Response, dataTableId: string, dto: UpsertDataTableRowDto): Promise<true | DataTableRowReturn[] | import("n8n-workflow").DataTableRowReturnWithState[]>;
    updateDataTableRows(req: AuthenticatedRequest<{
        projectId: string;
    }>, _res: Response, dataTableId: string, dto: UpdateDataTableRowDto): Promise<true | DataTableRowReturn[] | import("n8n-workflow").DataTableRowReturnWithState[]>;
    deleteDataTableRows(req: AuthenticatedRequest<{
        projectId: string;
    }>, _res: Response, dataTableId: string, dto: DeleteDataTableRowsDto): Promise<DataTableRowReturn[]>;
}
