"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatHubController = void 0;
const api_types_1 = require("@n8n/api-types");
const backend_common_1 = require("@n8n/backend-common");
const decorators_1 = require("@n8n/decorators");
const node_assert_1 = require("node:assert");
const chat_hub_service_1 = require("./chat-hub.service");
const chat_models_request_dto_1 = require("./dto/chat-models-request.dto");
let ChatHubController = class ChatHubController {
    constructor(chatService, logger) {
        this.chatService = chatService;
        this.logger = logger;
    }
    async getModels(req, _res, payload) {
        return await this.chatService.getModels(req.user, payload.credentials);
    }
    async sendMessage(req, res, payload) {
        res.header('Content-type', 'application/json-lines; charset=utf-8');
        res.header('Transfer-Encoding', 'chunked');
        res.header('Connection', 'keep-alive');
        res.header('Cache-Control', 'no-cache');
        res.flushHeaders();
        const replyId = crypto.randomUUID();
        this.logger.info(`Chat send request received: ${JSON.stringify(payload)}`);
        try {
            await this.chatService.askN8n(res, req.user, {
                ...payload,
                userId: req.user.id,
                replyId,
            });
        }
        catch (executionError) {
            (0, node_assert_1.strict)(executionError instanceof Error);
            this.logger.error('Error in chat send endpoint', { error: executionError });
            if (!res.headersSent) {
                res.status(500).json({
                    code: 500,
                    message: executionError.message,
                });
            }
            else {
                res.write(JSON.stringify({
                    type: 'error',
                    content: executionError.message,
                    id: replyId,
                }) + '\n');
                res.flush();
            }
            if (!res.writableEnded)
                res.end();
        }
    }
    async getConversations(_req, _res) {
        return await this.chatService.getConversations();
    }
    async getConversationMessages(req, _res) {
        return await this.chatService.getConversationMessages(req.params.id);
    }
};
exports.ChatHubController = ChatHubController;
__decorate([
    (0, decorators_1.Post)('/models'),
    __param(2, decorators_1.Body),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object, chat_models_request_dto_1.ChatModelsRequestDto]),
    __metadata("design:returntype", Promise)
], ChatHubController.prototype, "getModels", null);
__decorate([
    (0, decorators_1.GlobalScope)('chatHub:message'),
    (0, decorators_1.Post)('/send'),
    __param(2, decorators_1.Body),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object, api_types_1.ChatHubSendMessageRequest]),
    __metadata("design:returntype", Promise)
], ChatHubController.prototype, "sendMessage", null);
__decorate([
    (0, decorators_1.Get)('/conversations'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], ChatHubController.prototype, "getConversations", null);
__decorate([
    (0, decorators_1.Get)('/conversations/:id/messages'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], ChatHubController.prototype, "getConversationMessages", null);
exports.ChatHubController = ChatHubController = __decorate([
    (0, decorators_1.RestController)('/chat'),
    __metadata("design:paramtypes", [chat_hub_service_1.ChatHubService,
        backend_common_1.Logger])
], ChatHubController);
//# sourceMappingURL=chat-hub.controller.js.map