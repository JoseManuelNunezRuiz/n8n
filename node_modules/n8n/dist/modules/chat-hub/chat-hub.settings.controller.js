"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatHubSettingsController = void 0;
const backend_common_1 = require("@n8n/backend-common");
const decorators_1 = require("@n8n/decorators");
const chat_hub_settings_service_1 = require("./chat-hub.settings.service");
const update_chat_settings_dto_1 = require("./dto/update-chat-settings.dto");
let ChatHubSettingsController = class ChatHubSettingsController {
    constructor(settings, logger, moduleRegistry) {
        this.settings = settings;
        this.logger = logger;
        this.moduleRegistry = moduleRegistry;
    }
    async getSettings() {
        const chatAccessEnabled = await this.settings.getEnabled();
        return { chatAccessEnabled };
    }
    async updateSettings(_req, _res, dto) {
        const enabled = dto.chatAccessEnabled;
        await this.settings.setEnabled(enabled);
        try {
            await this.moduleRegistry.refreshModuleSettings('chat-hub');
        }
        catch (error) {
            this.logger.warn('Failed to sync chat settings to module registry', {
                cause: error instanceof Error ? error.message : String(error),
            });
        }
        return { chatAccessEnabled: enabled };
    }
};
exports.ChatHubSettingsController = ChatHubSettingsController;
__decorate([
    (0, decorators_1.Get)('/settings'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], ChatHubSettingsController.prototype, "getSettings", null);
__decorate([
    (0, decorators_1.Patch)('/settings'),
    (0, decorators_1.GlobalScope)('chatHub:manage'),
    __param(2, decorators_1.Body),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Response,
        update_chat_settings_dto_1.UpdateChatSettingsDto]),
    __metadata("design:returntype", Promise)
], ChatHubSettingsController.prototype, "updateSettings", null);
exports.ChatHubSettingsController = ChatHubSettingsController = __decorate([
    (0, decorators_1.RestController)('/chat'),
    __metadata("design:paramtypes", [chat_hub_settings_service_1.ChatHubSettingsService,
        backend_common_1.Logger,
        backend_common_1.ModuleRegistry])
], ChatHubSettingsController);
//# sourceMappingURL=chat-hub.settings.controller.js.map