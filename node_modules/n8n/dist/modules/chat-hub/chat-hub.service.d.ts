import { type ChatHubProvider, type ChatModelsResponse, type ChatHubConversationsResponse, type ChatHubMessagesResponse } from '@n8n/api-types';
import { Logger } from '@n8n/backend-common';
import { ExecutionRepository, ProjectRepository, SharedWorkflowRepository, User, WorkflowRepository } from '@n8n/db';
import type { Response } from 'express';
import type { ChatPayloadWithCredentials } from './chat-hub.types';
import { CredentialsHelper } from '../../credentials-helper';
import { WorkflowExecutionService } from '../../workflows/workflow-execution.service';
import { CredentialsService } from '../../credentials/credentials.service';
import { ActiveExecutions } from '../../active-executions';
export declare class ChatHubService {
    private readonly logger;
    private readonly credentialsService;
    private readonly credentialsHelper;
    private readonly executionRepository;
    private readonly workflowExecutionService;
    private readonly workflowRepository;
    private readonly projectRepository;
    private readonly sharedWorkflowRepository;
    private readonly activeExecutions;
    private sesssions;
    constructor(logger: Logger, credentialsService: CredentialsService, credentialsHelper: CredentialsHelper, executionRepository: ExecutionRepository, workflowExecutionService: WorkflowExecutionService, workflowRepository: WorkflowRepository, projectRepository: ProjectRepository, sharedWorkflowRepository: SharedWorkflowRepository, activeExecutions: ActiveExecutions);
    getModels(user: User, credentialIds: Record<ChatHubProvider, string | null>): Promise<ChatModelsResponse>;
    private fetchModelsForProvider;
    private fetchOpenAiModels;
    private fetchAnthropicModels;
    private fetchGoogleModels;
    private extractApiKey;
    private createChatWorkflow;
    private getMessage;
    askN8n(res: Response, user: User, payload: ChatPayloadWithCredentials): Promise<void>;
    private createModelNode;
    getConversations(): Promise<ChatHubConversationsResponse>;
    getConversationMessages(conversationId: string): Promise<ChatHubMessagesResponse>;
}
