'use strict';

var middlewareHostHeader = require('@aws-sdk/middleware-host-header');
var middlewareLogger = require('@aws-sdk/middleware-logger');
var middlewareRecursionDetection = require('@aws-sdk/middleware-recursion-detection');
var middlewareUserAgent = require('@aws-sdk/middleware-user-agent');
var configResolver = require('@smithy/config-resolver');
var core = require('@smithy/core');
var middlewareContentLength = require('@smithy/middleware-content-length');
var middlewareEndpoint = require('@smithy/middleware-endpoint');
var middlewareRetry = require('@smithy/middleware-retry');
var smithyClient = require('@smithy/smithy-client');
var httpAuthSchemeProvider = require('./auth/httpAuthSchemeProvider');
var runtimeConfig = require('./runtimeConfig');
var regionConfigResolver = require('@aws-sdk/region-config-resolver');
var protocolHttp = require('@smithy/protocol-http');
var middlewareSerde = require('@smithy/middleware-serde');
var core$1 = require('@aws-sdk/core');
var uuid = require('@smithy/uuid');

const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "kendra",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign(regionConfigResolver.getAwsRegionExtensionConfiguration(runtimeConfig), smithyClient.getDefaultExtensionConfiguration(runtimeConfig), protocolHttp.getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, regionConfigResolver.resolveAwsRegionExtensionConfiguration(extensionConfiguration), smithyClient.resolveDefaultRuntimeConfig(extensionConfiguration), protocolHttp.resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

class KendraClient extends smithyClient.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig.getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = middlewareUserAgent.resolveUserAgentConfig(_config_1);
        const _config_3 = middlewareRetry.resolveRetryConfig(_config_2);
        const _config_4 = configResolver.resolveRegionConfig(_config_3);
        const _config_5 = middlewareHostHeader.resolveHostHeaderConfig(_config_4);
        const _config_6 = middlewareEndpoint.resolveEndpointConfig(_config_5);
        const _config_7 = httpAuthSchemeProvider.resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use(middlewareUserAgent.getUserAgentPlugin(this.config));
        this.middlewareStack.use(middlewareRetry.getRetryPlugin(this.config));
        this.middlewareStack.use(middlewareContentLength.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middlewareHostHeader.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middlewareLogger.getLoggerPlugin(this.config));
        this.middlewareStack.use(middlewareRecursionDetection.getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(core.getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
            httpAuthSchemeParametersProvider: httpAuthSchemeProvider.defaultKendraHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use(core.getHttpSigningPlugin(this.config));
    }
    destroy() {
        super.destroy();
    }
}

class KendraServiceException extends smithyClient.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, KendraServiceException.prototype);
    }
}

class AccessDeniedException extends KendraServiceException {
    name = "AccessDeniedException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
const HighlightType = {
    STANDARD: "STANDARD",
    THESAURUS_SYNONYM: "THESAURUS_SYNONYM",
};
const AdditionalResultAttributeValueType = {
    TEXT_WITH_HIGHLIGHTS_VALUE: "TEXT_WITH_HIGHLIGHTS_VALUE",
};
const AlfrescoEntity = {
    blog: "blog",
    documentLibrary: "documentLibrary",
    wiki: "wiki",
};
const EntityType = {
    GROUP: "GROUP",
    USER: "USER",
};
class InternalServerException extends KendraServiceException {
    name = "InternalServerException";
    $fault = "server";
    Message;
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
    }
}
class ResourceAlreadyExistException extends KendraServiceException {
    name = "ResourceAlreadyExistException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ResourceAlreadyExistException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceAlreadyExistException.prototype);
        this.Message = opts.Message;
    }
}
class ResourceNotFoundException extends KendraServiceException {
    name = "ResourceNotFoundException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
class ThrottlingException extends KendraServiceException {
    name = "ThrottlingException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
    }
}
class ValidationException extends KendraServiceException {
    name = "ValidationException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
    }
}
const Persona = {
    OWNER: "OWNER",
    VIEWER: "VIEWER",
};
const AttributeSuggestionsMode = {
    ACTIVE: "ACTIVE",
    INACTIVE: "INACTIVE",
};
const ErrorCode = {
    INTERNAL_ERROR: "InternalError",
    INVALID_REQUEST: "InvalidRequest",
};
class ConflictException extends KendraServiceException {
    name = "ConflictException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
const DocumentStatus = {
    FAILED: "FAILED",
    INDEXED: "INDEXED",
    NOT_FOUND: "NOT_FOUND",
    PROCESSING: "PROCESSING",
    UPDATED: "UPDATED",
    UPDATE_FAILED: "UPDATE_FAILED",
};
const ConditionOperator = {
    BeginsWith: "BeginsWith",
    Contains: "Contains",
    Equals: "Equals",
    Exists: "Exists",
    GreaterThan: "GreaterThan",
    GreaterThanOrEquals: "GreaterThanOrEquals",
    LessThan: "LessThan",
    LessThanOrEquals: "LessThanOrEquals",
    NotContains: "NotContains",
    NotEquals: "NotEquals",
    NotExists: "NotExists",
};
const ReadAccessType = {
    ALLOW: "ALLOW",
    DENY: "DENY",
};
const PrincipalType = {
    GROUP: "GROUP",
    USER: "USER",
};
const ContentType = {
    CSV: "CSV",
    HTML: "HTML",
    JSON: "JSON",
    MD: "MD",
    MS_EXCEL: "MS_EXCEL",
    MS_WORD: "MS_WORD",
    PDF: "PDF",
    PLAIN_TEXT: "PLAIN_TEXT",
    PPT: "PPT",
    RTF: "RTF",
    XML: "XML",
    XSLT: "XSLT",
};
class ServiceQuotaExceededException extends KendraServiceException {
    name = "ServiceQuotaExceededException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.Message = opts.Message;
    }
}
const ConfluenceAttachmentFieldName = {
    AUTHOR: "AUTHOR",
    CONTENT_TYPE: "CONTENT_TYPE",
    CREATED_DATE: "CREATED_DATE",
    DISPLAY_URL: "DISPLAY_URL",
    FILE_SIZE: "FILE_SIZE",
    ITEM_TYPE: "ITEM_TYPE",
    PARENT_ID: "PARENT_ID",
    SPACE_KEY: "SPACE_KEY",
    SPACE_NAME: "SPACE_NAME",
    URL: "URL",
    VERSION: "VERSION",
};
const ConfluenceAuthenticationType = {
    HTTP_BASIC: "HTTP_BASIC",
    PAT: "PAT",
};
const ConfluenceBlogFieldName = {
    AUTHOR: "AUTHOR",
    DISPLAY_URL: "DISPLAY_URL",
    ITEM_TYPE: "ITEM_TYPE",
    LABELS: "LABELS",
    PUBLISH_DATE: "PUBLISH_DATE",
    SPACE_KEY: "SPACE_KEY",
    SPACE_NAME: "SPACE_NAME",
    URL: "URL",
    VERSION: "VERSION",
};
const ConfluencePageFieldName = {
    AUTHOR: "AUTHOR",
    CONTENT_STATUS: "CONTENT_STATUS",
    CREATED_DATE: "CREATED_DATE",
    DISPLAY_URL: "DISPLAY_URL",
    ITEM_TYPE: "ITEM_TYPE",
    LABELS: "LABELS",
    MODIFIED_DATE: "MODIFIED_DATE",
    PARENT_ID: "PARENT_ID",
    SPACE_KEY: "SPACE_KEY",
    SPACE_NAME: "SPACE_NAME",
    URL: "URL",
    VERSION: "VERSION",
};
const ConfluenceSpaceFieldName = {
    DISPLAY_URL: "DISPLAY_URL",
    ITEM_TYPE: "ITEM_TYPE",
    SPACE_KEY: "SPACE_KEY",
    URL: "URL",
};
const ConfluenceVersion = {
    CLOUD: "CLOUD",
    SERVER: "SERVER",
};
const DatabaseEngineType = {
    RDS_AURORA_MYSQL: "RDS_AURORA_MYSQL",
    RDS_AURORA_POSTGRESQL: "RDS_AURORA_POSTGRESQL",
    RDS_MYSQL: "RDS_MYSQL",
    RDS_POSTGRESQL: "RDS_POSTGRESQL",
};
const QueryIdentifiersEnclosingOption = {
    DOUBLE_QUOTES: "DOUBLE_QUOTES",
    NONE: "NONE",
};
const FsxFileSystemType = {
    WINDOWS: "WINDOWS",
};
const Type = {
    ON_PREMISE: "ON_PREMISE",
    SAAS: "SAAS",
};
const IssueSubEntity = {
    ATTACHMENTS: "ATTACHMENTS",
    COMMENTS: "COMMENTS",
    WORKLOGS: "WORKLOGS",
};
const SalesforceChatterFeedIncludeFilterType = {
    ACTIVE_USER: "ACTIVE_USER",
    STANDARD_USER: "STANDARD_USER",
};
const SalesforceKnowledgeArticleState = {
    ARCHIVED: "ARCHIVED",
    DRAFT: "DRAFT",
    PUBLISHED: "PUBLISHED",
};
const SalesforceStandardObjectName = {
    ACCOUNT: "ACCOUNT",
    CAMPAIGN: "CAMPAIGN",
    CASE: "CASE",
    CONTACT: "CONTACT",
    CONTRACT: "CONTRACT",
    DOCUMENT: "DOCUMENT",
    GROUP: "GROUP",
    IDEA: "IDEA",
    LEAD: "LEAD",
    OPPORTUNITY: "OPPORTUNITY",
    PARTNER: "PARTNER",
    PRICEBOOK: "PRICEBOOK",
    PRODUCT: "PRODUCT",
    PROFILE: "PROFILE",
    SOLUTION: "SOLUTION",
    TASK: "TASK",
    USER: "USER",
};
const ServiceNowAuthenticationType = {
    HTTP_BASIC: "HTTP_BASIC",
    OAUTH2: "OAUTH2",
};
const ServiceNowBuildVersionType = {
    LONDON: "LONDON",
    OTHERS: "OTHERS",
};
const SharePointOnlineAuthenticationType = {
    HTTP_BASIC: "HTTP_BASIC",
    OAUTH2: "OAUTH2",
};
const SharePointVersion = {
    SHAREPOINT_2013: "SHAREPOINT_2013",
    SHAREPOINT_2016: "SHAREPOINT_2016",
    SHAREPOINT_2019: "SHAREPOINT_2019",
    SHAREPOINT_ONLINE: "SHAREPOINT_ONLINE",
};
const SlackEntity = {
    DIRECT_MESSAGE: "DIRECT_MESSAGE",
    GROUP_MESSAGE: "GROUP_MESSAGE",
    PRIVATE_CHANNEL: "PRIVATE_CHANNEL",
    PUBLIC_CHANNEL: "PUBLIC_CHANNEL",
};
const WebCrawlerMode = {
    EVERYTHING: "EVERYTHING",
    HOST_ONLY: "HOST_ONLY",
    SUBDOMAINS: "SUBDOMAINS",
};
const DataSourceType = {
    ALFRESCO: "ALFRESCO",
    BOX: "BOX",
    CONFLUENCE: "CONFLUENCE",
    CUSTOM: "CUSTOM",
    DATABASE: "DATABASE",
    FSX: "FSX",
    GITHUB: "GITHUB",
    GOOGLEDRIVE: "GOOGLEDRIVE",
    JIRA: "JIRA",
    ONEDRIVE: "ONEDRIVE",
    QUIP: "QUIP",
    S3: "S3",
    SALESFORCE: "SALESFORCE",
    SERVICENOW: "SERVICENOW",
    SHAREPOINT: "SHAREPOINT",
    SLACK: "SLACK",
    TEMPLATE: "TEMPLATE",
    WEBCRAWLER: "WEBCRAWLER",
    WORKDOCS: "WORKDOCS",
};
const FaqFileFormat = {
    CSV: "CSV",
    CSV_WITH_HEADER: "CSV_WITH_HEADER",
    JSON: "JSON",
};
const FeaturedResultsSetStatus = {
    ACTIVE: "ACTIVE",
    INACTIVE: "INACTIVE",
};
class FeaturedResultsConflictException extends KendraServiceException {
    name = "FeaturedResultsConflictException";
    $fault = "client";
    Message;
    ConflictingItems;
    constructor(opts) {
        super({
            name: "FeaturedResultsConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, FeaturedResultsConflictException.prototype);
        this.Message = opts.Message;
        this.ConflictingItems = opts.ConflictingItems;
    }
}
const IndexEdition = {
    DEVELOPER_EDITION: "DEVELOPER_EDITION",
    ENTERPRISE_EDITION: "ENTERPRISE_EDITION",
    GEN_AI_ENTERPRISE_EDITION: "GEN_AI_ENTERPRISE_EDITION",
};
const UserContextPolicy = {
    ATTRIBUTE_FILTER: "ATTRIBUTE_FILTER",
    USER_TOKEN: "USER_TOKEN",
};
const UserGroupResolutionMode = {
    AWS_SSO: "AWS_SSO",
    NONE: "NONE",
};
const KeyLocation = {
    SECRET_MANAGER: "SECRET_MANAGER",
    URL: "URL",
};
const DataSourceStatus = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    UPDATING: "UPDATING",
};
const EndpointType = {
    HOME: "HOME",
};
const ExperienceStatus = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
};
const FaqStatus = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    UPDATING: "UPDATING",
};
const Order = {
    ASCENDING: "ASCENDING",
    DESCENDING: "DESCENDING",
};
const DocumentAttributeValueType = {
    DATE_VALUE: "DATE_VALUE",
    LONG_VALUE: "LONG_VALUE",
    STRING_LIST_VALUE: "STRING_LIST_VALUE",
    STRING_VALUE: "STRING_VALUE",
};
const IndexStatus = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    SYSTEM_UPDATING: "SYSTEM_UPDATING",
    UPDATING: "UPDATING",
};
const PrincipalMappingStatus = {
    DELETED: "DELETED",
    DELETING: "DELETING",
    FAILED: "FAILED",
    PROCESSING: "PROCESSING",
    SUCCEEDED: "SUCCEEDED",
};
const QuerySuggestionsBlockListStatus = {
    ACTIVE: "ACTIVE",
    ACTIVE_BUT_UPDATE_FAILED: "ACTIVE_BUT_UPDATE_FAILED",
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    UPDATING: "UPDATING",
};
const Mode = {
    ENABLED: "ENABLED",
    LEARN_ONLY: "LEARN_ONLY",
};
const QuerySuggestionsStatus = {
    ACTIVE: "ACTIVE",
    UPDATING: "UPDATING",
};
const ThesaurusStatus = {
    ACTIVE: "ACTIVE",
    ACTIVE_BUT_UPDATE_FAILED: "ACTIVE_BUT_UPDATE_FAILED",
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    UPDATING: "UPDATING",
};
const SuggestionType = {
    DOCUMENT_ATTRIBUTES: "DOCUMENT_ATTRIBUTES",
    QUERY: "QUERY",
};
const Interval = {
    ONE_MONTH_AGO: "ONE_MONTH_AGO",
    ONE_WEEK_AGO: "ONE_WEEK_AGO",
    THIS_MONTH: "THIS_MONTH",
    THIS_WEEK: "THIS_WEEK",
    TWO_MONTHS_AGO: "TWO_MONTHS_AGO",
    TWO_WEEKS_AGO: "TWO_WEEKS_AGO",
};
const MetricType = {
    AGG_QUERY_DOC_METRICS: "AGG_QUERY_DOC_METRICS",
    DOCS_BY_CLICK_COUNT: "DOCS_BY_CLICK_COUNT",
    QUERIES_BY_COUNT: "QUERIES_BY_COUNT",
    QUERIES_BY_ZERO_CLICK_RATE: "QUERIES_BY_ZERO_CLICK_RATE",
    QUERIES_BY_ZERO_RESULT_RATE: "QUERIES_BY_ZERO_RESULT_RATE",
    TREND_QUERY_DOC_METRICS: "TREND_QUERY_DOC_METRICS",
};
class InvalidRequestException extends KendraServiceException {
    name = "InvalidRequestException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
        this.Message = opts.Message;
    }
}
const DataSourceSyncJobStatus = {
    ABORTED: "ABORTED",
    FAILED: "FAILED",
    INCOMPLETE: "INCOMPLETE",
    STOPPING: "STOPPING",
    SUCCEEDED: "SUCCEEDED",
    SYNCING: "SYNCING",
    SYNCING_INDEXING: "SYNCING_INDEXING",
};
class ResourceUnavailableException extends KendraServiceException {
    name = "ResourceUnavailableException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ResourceUnavailableException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceUnavailableException.prototype);
        this.Message = opts.Message;
    }
}
const MissingAttributeKeyStrategy = {
    COLLAPSE: "COLLAPSE",
    EXPAND: "EXPAND",
    IGNORE: "IGNORE",
};
const SortOrder = {
    ASC: "ASC",
    DESC: "DESC",
};
const QueryResultType = {
    ANSWER: "ANSWER",
    DOCUMENT: "DOCUMENT",
    QUESTION_ANSWER: "QUESTION_ANSWER",
};
const QueryResultFormat = {
    TABLE: "TABLE",
    TEXT: "TEXT",
};
const ServerSideEncryptionConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.KmsKeyId && { KmsKeyId: smithyClient.SENSITIVE_STRING }),
});
const CreateIndexRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ServerSideEncryptionConfiguration && {
        ServerSideEncryptionConfiguration: ServerSideEncryptionConfigurationFilterSensitiveLog(obj.ServerSideEncryptionConfiguration),
    }),
});
const DescribeIndexResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ServerSideEncryptionConfiguration && {
        ServerSideEncryptionConfiguration: ServerSideEncryptionConfigurationFilterSensitiveLog(obj.ServerSideEncryptionConfiguration),
    }),
});
const EntityDisplayDataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserName && { UserName: smithyClient.SENSITIVE_STRING }),
    ...(obj.GroupName && { GroupName: smithyClient.SENSITIVE_STRING }),
    ...(obj.IdentifiedUserName && { IdentifiedUserName: smithyClient.SENSITIVE_STRING }),
    ...(obj.FirstName && { FirstName: smithyClient.SENSITIVE_STRING }),
    ...(obj.LastName && { LastName: smithyClient.SENSITIVE_STRING }),
});
const ExperienceEntitiesSummaryFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DisplayData && { DisplayData: EntityDisplayDataFilterSensitiveLog(obj.DisplayData) }),
});
const ListExperienceEntitiesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SummaryItems && {
        SummaryItems: obj.SummaryItems.map((item) => ExperienceEntitiesSummaryFilterSensitiveLog(item)),
    }),
});

const ScoreConfidence = {
    HIGH: "HIGH",
    LOW: "LOW",
    MEDIUM: "MEDIUM",
    NOT_AVAILABLE: "NOT_AVAILABLE",
    VERY_HIGH: "VERY_HIGH",
};
const WarningCode = {
    QUERY_LANGUAGE_INVALID_SYNTAX: "QUERY_LANGUAGE_INVALID_SYNTAX",
};
class ResourceInUseException extends KendraServiceException {
    name = "ResourceInUseException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ResourceInUseException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
        this.Message = opts.Message;
    }
}
const RelevanceType = {
    NOT_RELEVANT: "NOT_RELEVANT",
    RELEVANT: "RELEVANT",
};

const se_AssociateEntitiesToExperienceCommand = async (input, context) => {
    const headers = sharedHeaders("AssociateEntitiesToExperience");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AssociatePersonasToEntitiesCommand = async (input, context) => {
    const headers = sharedHeaders("AssociatePersonasToEntities");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_BatchDeleteDocumentCommand = async (input, context) => {
    const headers = sharedHeaders("BatchDeleteDocument");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_BatchDeleteFeaturedResultsSetCommand = async (input, context) => {
    const headers = sharedHeaders("BatchDeleteFeaturedResultsSet");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_BatchGetDocumentStatusCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetDocumentStatus");
    let body;
    body = JSON.stringify(se_BatchGetDocumentStatusRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_BatchPutDocumentCommand = async (input, context) => {
    const headers = sharedHeaders("BatchPutDocument");
    let body;
    body = JSON.stringify(se_BatchPutDocumentRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ClearQuerySuggestionsCommand = async (input, context) => {
    const headers = sharedHeaders("ClearQuerySuggestions");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateAccessControlConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAccessControlConfiguration");
    let body;
    body = JSON.stringify(se_CreateAccessControlConfigurationRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateDataSourceCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDataSource");
    let body;
    body = JSON.stringify(se_CreateDataSourceRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateExperienceCommand = async (input, context) => {
    const headers = sharedHeaders("CreateExperience");
    let body;
    body = JSON.stringify(se_CreateExperienceRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateFaqCommand = async (input, context) => {
    const headers = sharedHeaders("CreateFaq");
    let body;
    body = JSON.stringify(se_CreateFaqRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateFeaturedResultsSetCommand = async (input, context) => {
    const headers = sharedHeaders("CreateFeaturedResultsSet");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateIndexCommand = async (input, context) => {
    const headers = sharedHeaders("CreateIndex");
    let body;
    body = JSON.stringify(se_CreateIndexRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateQuerySuggestionsBlockListCommand = async (input, context) => {
    const headers = sharedHeaders("CreateQuerySuggestionsBlockList");
    let body;
    body = JSON.stringify(se_CreateQuerySuggestionsBlockListRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateThesaurusCommand = async (input, context) => {
    const headers = sharedHeaders("CreateThesaurus");
    let body;
    body = JSON.stringify(se_CreateThesaurusRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteAccessControlConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAccessControlConfiguration");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteDataSourceCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDataSource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteExperienceCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteExperience");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteFaqCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteFaq");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteIndexCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteIndex");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeletePrincipalMappingCommand = async (input, context) => {
    const headers = sharedHeaders("DeletePrincipalMapping");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteQuerySuggestionsBlockListCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteQuerySuggestionsBlockList");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteThesaurusCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteThesaurus");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeAccessControlConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAccessControlConfiguration");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeDataSourceCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDataSource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeExperienceCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeExperience");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeFaqCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeFaq");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeFeaturedResultsSetCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeFeaturedResultsSet");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeIndexCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeIndex");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribePrincipalMappingCommand = async (input, context) => {
    const headers = sharedHeaders("DescribePrincipalMapping");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeQuerySuggestionsBlockListCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeQuerySuggestionsBlockList");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeQuerySuggestionsConfigCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeQuerySuggestionsConfig");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeThesaurusCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeThesaurus");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisassociateEntitiesFromExperienceCommand = async (input, context) => {
    const headers = sharedHeaders("DisassociateEntitiesFromExperience");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisassociatePersonasFromEntitiesCommand = async (input, context) => {
    const headers = sharedHeaders("DisassociatePersonasFromEntities");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetQuerySuggestionsCommand = async (input, context) => {
    const headers = sharedHeaders("GetQuerySuggestions");
    let body;
    body = JSON.stringify(se_GetQuerySuggestionsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetSnapshotsCommand = async (input, context) => {
    const headers = sharedHeaders("GetSnapshots");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListAccessControlConfigurationsCommand = async (input, context) => {
    const headers = sharedHeaders("ListAccessControlConfigurations");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListDataSourcesCommand = async (input, context) => {
    const headers = sharedHeaders("ListDataSources");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListDataSourceSyncJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDataSourceSyncJobs");
    let body;
    body = JSON.stringify(se_ListDataSourceSyncJobsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListEntityPersonasCommand = async (input, context) => {
    const headers = sharedHeaders("ListEntityPersonas");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListExperienceEntitiesCommand = async (input, context) => {
    const headers = sharedHeaders("ListExperienceEntities");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListExperiencesCommand = async (input, context) => {
    const headers = sharedHeaders("ListExperiences");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListFaqsCommand = async (input, context) => {
    const headers = sharedHeaders("ListFaqs");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListFeaturedResultsSetsCommand = async (input, context) => {
    const headers = sharedHeaders("ListFeaturedResultsSets");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListGroupsOlderThanOrderingIdCommand = async (input, context) => {
    const headers = sharedHeaders("ListGroupsOlderThanOrderingId");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListIndicesCommand = async (input, context) => {
    const headers = sharedHeaders("ListIndices");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListQuerySuggestionsBlockListsCommand = async (input, context) => {
    const headers = sharedHeaders("ListQuerySuggestionsBlockLists");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListThesauriCommand = async (input, context) => {
    const headers = sharedHeaders("ListThesauri");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutPrincipalMappingCommand = async (input, context) => {
    const headers = sharedHeaders("PutPrincipalMapping");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_QueryCommand = async (input, context) => {
    const headers = sharedHeaders("Query");
    let body;
    body = JSON.stringify(se_QueryRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RetrieveCommand = async (input, context) => {
    const headers = sharedHeaders("Retrieve");
    let body;
    body = JSON.stringify(se_RetrieveRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartDataSourceSyncJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartDataSourceSyncJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopDataSourceSyncJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopDataSourceSyncJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SubmitFeedbackCommand = async (input, context) => {
    const headers = sharedHeaders("SubmitFeedback");
    let body;
    body = JSON.stringify(se_SubmitFeedbackRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateAccessControlConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateAccessControlConfiguration");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateDataSourceCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDataSource");
    let body;
    body = JSON.stringify(se_UpdateDataSourceRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateExperienceCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateExperience");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateFeaturedResultsSetCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateFeaturedResultsSet");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateIndexCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateIndex");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateQuerySuggestionsBlockListCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateQuerySuggestionsBlockList");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateQuerySuggestionsConfigCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateQuerySuggestionsConfig");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateThesaurusCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateThesaurus");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const de_AssociateEntitiesToExperienceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociatePersonasToEntitiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_BatchDeleteDocumentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_BatchDeleteFeaturedResultsSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_BatchGetDocumentStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_BatchPutDocumentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ClearQuerySuggestionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CreateAccessControlConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateDataSourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateExperienceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateFaqCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateFeaturedResultsSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateIndexCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateQuerySuggestionsBlockListCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateThesaurusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteAccessControlConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteDataSourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteExperienceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteFaqCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteIndexCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeletePrincipalMappingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteQuerySuggestionsBlockListCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteThesaurusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DescribeAccessControlConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeDataSourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeDataSourceResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeExperienceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeExperienceResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeFaqCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeFaqResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeFeaturedResultsSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeIndexCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeIndexResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribePrincipalMappingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribePrincipalMappingResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeQuerySuggestionsBlockListCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeQuerySuggestionsBlockListResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeQuerySuggestionsConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeQuerySuggestionsConfigResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeThesaurusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeThesaurusResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateEntitiesFromExperienceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociatePersonasFromEntitiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetQuerySuggestionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetQuerySuggestionsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetSnapshotsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetSnapshotsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListAccessControlConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListDataSourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListDataSourcesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListDataSourceSyncJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListDataSourceSyncJobsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListEntityPersonasCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListEntityPersonasResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListExperienceEntitiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListExperiencesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListExperiencesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListFaqsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListFaqsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListFeaturedResultsSetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListGroupsOlderThanOrderingIdCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListIndicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListIndicesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListQuerySuggestionsBlockListsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListQuerySuggestionsBlockListsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListThesauriCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListThesauriResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutPrincipalMappingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_QueryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_QueryResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RetrieveCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_RetrieveResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartDataSourceSyncJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopDataSourceSyncJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_SubmitFeedbackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateAccessControlConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateDataSourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UpdateExperienceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UpdateFeaturedResultsSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateIndexCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UpdateQuerySuggestionsBlockListCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UpdateQuerySuggestionsConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UpdateThesaurusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonErrorBody(output.body, context),
    };
    const errorCode = core$1.loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput);
        case "ResourceAlreadyExistException":
        case "com.amazonaws.kendra#ResourceAlreadyExistException":
            throw await de_ResourceAlreadyExistExceptionRes(parsedOutput);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.kendra#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput);
        case "FeaturedResultsConflictException":
        case "com.amazonaws.kendra#FeaturedResultsConflictException":
            throw await de_FeaturedResultsConflictExceptionRes(parsedOutput);
        case "InvalidRequestException":
        case "com.amazonaws.kendra#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput);
        case "ResourceUnavailableException":
        case "com.amazonaws.kendra#ResourceUnavailableException":
            throw await de_ResourceUnavailableExceptionRes(parsedOutput);
        case "ResourceInUseException":
        case "com.amazonaws.kendra#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_FeaturedResultsConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new FeaturedResultsConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceAlreadyExistExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ResourceAlreadyExistException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceUnavailableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ResourceUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const se_AttributeFilter = (input, context) => {
    return smithyClient.take(input, {
        AndAllFilters: (_) => se_AttributeFilterList(_),
        ContainsAll: (_) => se_DocumentAttribute(_),
        ContainsAny: (_) => se_DocumentAttribute(_),
        EqualsTo: (_) => se_DocumentAttribute(_),
        GreaterThan: (_) => se_DocumentAttribute(_),
        GreaterThanOrEquals: (_) => se_DocumentAttribute(_),
        LessThan: (_) => se_DocumentAttribute(_),
        LessThanOrEquals: (_) => se_DocumentAttribute(_),
        NotFilter: (_) => se_AttributeFilter(_),
        OrAllFilters: (_) => se_AttributeFilterList(_),
    });
};
const se_AttributeFilterList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AttributeFilter(entry);
    });
};
const se_AttributeSuggestionsGetConfig = (input, context) => {
    return smithyClient.take(input, {
        AdditionalResponseAttributes: smithyClient._json,
        AttributeFilter: (_) => se_AttributeFilter(_),
        SuggestionAttributes: smithyClient._json,
        UserContext: smithyClient._json,
    });
};
const se_BatchGetDocumentStatusRequest = (input, context) => {
    return smithyClient.take(input, {
        DocumentInfoList: (_) => se_DocumentInfoList(_),
        IndexId: [],
    });
};
const se_BatchPutDocumentRequest = (input, context) => {
    return smithyClient.take(input, {
        CustomDocumentEnrichmentConfiguration: (_) => se_CustomDocumentEnrichmentConfiguration(_),
        Documents: (_) => se_DocumentList(_, context),
        IndexId: [],
        RoleArn: [],
    });
};
const se_ClickFeedback = (input, context) => {
    return smithyClient.take(input, {
        ClickTime: (_) => _.getTime() / 1_000,
        ResultId: [],
    });
};
const se_ClickFeedbackList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ClickFeedback(entry);
    });
};
const se_CreateAccessControlConfigurationRequest = (input, context) => {
    return smithyClient.take(input, {
        AccessControlList: smithyClient._json,
        ClientToken: [true, (_) => _ ?? uuid.v4()],
        Description: [],
        HierarchicalAccessControlList: smithyClient._json,
        IndexId: [],
        Name: [],
    });
};
const se_CreateDataSourceRequest = (input, context) => {
    return smithyClient.take(input, {
        ClientToken: [true, (_) => _ ?? uuid.v4()],
        Configuration: (_) => se_DataSourceConfiguration(_),
        CustomDocumentEnrichmentConfiguration: (_) => se_CustomDocumentEnrichmentConfiguration(_),
        Description: [],
        IndexId: [],
        LanguageCode: [],
        Name: [],
        RoleArn: [],
        Schedule: [],
        Tags: smithyClient._json,
        Type: [],
        VpcConfiguration: smithyClient._json,
    });
};
const se_CreateExperienceRequest = (input, context) => {
    return smithyClient.take(input, {
        ClientToken: [true, (_) => _ ?? uuid.v4()],
        Configuration: smithyClient._json,
        Description: [],
        IndexId: [],
        Name: [],
        RoleArn: [],
    });
};
const se_CreateFaqRequest = (input, context) => {
    return smithyClient.take(input, {
        ClientToken: [true, (_) => _ ?? uuid.v4()],
        Description: [],
        FileFormat: [],
        IndexId: [],
        LanguageCode: [],
        Name: [],
        RoleArn: [],
        S3Path: smithyClient._json,
        Tags: smithyClient._json,
    });
};
const se_CreateIndexRequest = (input, context) => {
    return smithyClient.take(input, {
        ClientToken: [true, (_) => _ ?? uuid.v4()],
        Description: [],
        Edition: [],
        Name: [],
        RoleArn: [],
        ServerSideEncryptionConfiguration: smithyClient._json,
        Tags: smithyClient._json,
        UserContextPolicy: [],
        UserGroupResolutionConfiguration: smithyClient._json,
        UserTokenConfigurations: smithyClient._json,
    });
};
const se_CreateQuerySuggestionsBlockListRequest = (input, context) => {
    return smithyClient.take(input, {
        ClientToken: [true, (_) => _ ?? uuid.v4()],
        Description: [],
        IndexId: [],
        Name: [],
        RoleArn: [],
        SourceS3Path: smithyClient._json,
        Tags: smithyClient._json,
    });
};
const se_CreateThesaurusRequest = (input, context) => {
    return smithyClient.take(input, {
        ClientToken: [true, (_) => _ ?? uuid.v4()],
        Description: [],
        IndexId: [],
        Name: [],
        RoleArn: [],
        SourceS3Path: smithyClient._json,
        Tags: smithyClient._json,
    });
};
const se_CustomDocumentEnrichmentConfiguration = (input, context) => {
    return smithyClient.take(input, {
        InlineConfigurations: (_) => se_InlineCustomDocumentEnrichmentConfigurationList(_),
        PostExtractionHookConfiguration: (_) => se_HookConfiguration(_),
        PreExtractionHookConfiguration: (_) => se_HookConfiguration(_),
        RoleArn: [],
    });
};
const se_DataSourceConfiguration = (input, context) => {
    return smithyClient.take(input, {
        AlfrescoConfiguration: smithyClient._json,
        BoxConfiguration: smithyClient._json,
        ConfluenceConfiguration: smithyClient._json,
        DatabaseConfiguration: smithyClient._json,
        FsxConfiguration: smithyClient._json,
        GitHubConfiguration: smithyClient._json,
        GoogleDriveConfiguration: smithyClient._json,
        JiraConfiguration: smithyClient._json,
        OneDriveConfiguration: smithyClient._json,
        QuipConfiguration: smithyClient._json,
        S3Configuration: smithyClient._json,
        SalesforceConfiguration: smithyClient._json,
        ServiceNowConfiguration: smithyClient._json,
        SharePointConfiguration: smithyClient._json,
        SlackConfiguration: smithyClient._json,
        TemplateConfiguration: (_) => se_TemplateConfiguration(_),
        WebCrawlerConfiguration: (_) => se_WebCrawlerConfiguration(_),
        WorkDocsConfiguration: smithyClient._json,
    });
};
const se_Document = (input, context) => {
    return smithyClient.take(input, {
        AccessControlConfigurationId: [],
        AccessControlList: smithyClient._json,
        Attributes: (_) => se_DocumentAttributeList(_),
        Blob: context.base64Encoder,
        ContentType: [],
        HierarchicalAccessControlList: smithyClient._json,
        Id: [],
        S3Path: smithyClient._json,
        Title: [],
    });
};
const se_DocumentAttribute = (input, context) => {
    return smithyClient.take(input, {
        Key: [],
        Value: (_) => se_DocumentAttributeValue(_),
    });
};
const se_DocumentAttributeCondition = (input, context) => {
    return smithyClient.take(input, {
        ConditionDocumentAttributeKey: [],
        ConditionOnValue: (_) => se_DocumentAttributeValue(_),
        Operator: [],
    });
};
const se_DocumentAttributeList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_DocumentAttribute(entry);
    });
};
const se_DocumentAttributeTarget = (input, context) => {
    return smithyClient.take(input, {
        TargetDocumentAttributeKey: [],
        TargetDocumentAttributeValue: (_) => se_DocumentAttributeValue(_),
        TargetDocumentAttributeValueDeletion: [],
    });
};
const se_DocumentAttributeValue = (input, context) => {
    return smithyClient.take(input, {
        DateValue: (_) => _.getTime() / 1_000,
        LongValue: [],
        StringListValue: smithyClient._json,
        StringValue: [],
    });
};
const se_DocumentInfo = (input, context) => {
    return smithyClient.take(input, {
        Attributes: (_) => se_DocumentAttributeList(_),
        DocumentId: [],
    });
};
const se_DocumentInfoList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_DocumentInfo(entry);
    });
};
const se_DocumentList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Document(entry, context);
    });
};
const se_Facet = (input, context) => {
    return smithyClient.take(input, {
        DocumentAttributeKey: [],
        Facets: (_) => se_FacetList(_),
        MaxResults: [],
    });
};
const se_FacetList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Facet(entry);
    });
};
const se_GetQuerySuggestionsRequest = (input, context) => {
    return smithyClient.take(input, {
        AttributeSuggestionsConfig: (_) => se_AttributeSuggestionsGetConfig(_),
        IndexId: [],
        MaxSuggestionsCount: [],
        QueryText: [],
        SuggestionTypes: smithyClient._json,
    });
};
const se_HookConfiguration = (input, context) => {
    return smithyClient.take(input, {
        InvocationCondition: (_) => se_DocumentAttributeCondition(_),
        LambdaArn: [],
        S3Bucket: [],
    });
};
const se_InlineCustomDocumentEnrichmentConfiguration = (input, context) => {
    return smithyClient.take(input, {
        Condition: (_) => se_DocumentAttributeCondition(_),
        DocumentContentDeletion: [],
        Target: (_) => se_DocumentAttributeTarget(_),
    });
};
const se_InlineCustomDocumentEnrichmentConfigurationList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_InlineCustomDocumentEnrichmentConfiguration(entry);
    });
};
const se_ListDataSourceSyncJobsRequest = (input, context) => {
    return smithyClient.take(input, {
        Id: [],
        IndexId: [],
        MaxResults: [],
        NextToken: [],
        StartTimeFilter: (_) => se_TimeRange(_),
        StatusFilter: [],
    });
};
const se_QueryRequest = (input, context) => {
    return smithyClient.take(input, {
        AttributeFilter: (_) => se_AttributeFilter(_),
        CollapseConfiguration: smithyClient._json,
        DocumentRelevanceOverrideConfigurations: smithyClient._json,
        Facets: (_) => se_FacetList(_),
        IndexId: [],
        PageNumber: [],
        PageSize: [],
        QueryResultTypeFilter: [],
        QueryText: [],
        RequestedDocumentAttributes: smithyClient._json,
        SortingConfiguration: smithyClient._json,
        SortingConfigurations: smithyClient._json,
        SpellCorrectionConfiguration: smithyClient._json,
        UserContext: smithyClient._json,
        VisitorId: [],
    });
};
const se_RetrieveRequest = (input, context) => {
    return smithyClient.take(input, {
        AttributeFilter: (_) => se_AttributeFilter(_),
        DocumentRelevanceOverrideConfigurations: smithyClient._json,
        IndexId: [],
        PageNumber: [],
        PageSize: [],
        QueryText: [],
        RequestedDocumentAttributes: smithyClient._json,
        UserContext: smithyClient._json,
    });
};
const se_SubmitFeedbackRequest = (input, context) => {
    return smithyClient.take(input, {
        ClickFeedbackItems: (_) => se_ClickFeedbackList(_),
        IndexId: [],
        QueryId: [],
        RelevanceFeedbackItems: smithyClient._json,
    });
};
const se_Template = (input, context) => {
    return input;
};
const se_TemplateConfiguration = (input, context) => {
    return smithyClient.take(input, {
        Template: (_) => se_Template(_),
    });
};
const se_TimeRange = (input, context) => {
    return smithyClient.take(input, {
        EndTime: (_) => _.getTime() / 1_000,
        StartTime: (_) => _.getTime() / 1_000,
    });
};
const se_UpdateDataSourceRequest = (input, context) => {
    return smithyClient.take(input, {
        Configuration: (_) => se_DataSourceConfiguration(_),
        CustomDocumentEnrichmentConfiguration: (_) => se_CustomDocumentEnrichmentConfiguration(_),
        Description: [],
        Id: [],
        IndexId: [],
        LanguageCode: [],
        Name: [],
        RoleArn: [],
        Schedule: [],
        VpcConfiguration: smithyClient._json,
    });
};
const se_WebCrawlerConfiguration = (input, context) => {
    return smithyClient.take(input, {
        AuthenticationConfiguration: smithyClient._json,
        CrawlDepth: [],
        MaxContentSizePerPageInMegaBytes: smithyClient.serializeFloat,
        MaxLinksPerPage: [],
        MaxUrlsPerMinuteCrawlRate: [],
        ProxyConfiguration: smithyClient._json,
        UrlExclusionPatterns: smithyClient._json,
        UrlInclusionPatterns: smithyClient._json,
        Urls: smithyClient._json,
    });
};
const de_CollapsedResultDetail = (output, context) => {
    return smithyClient.take(output, {
        DocumentAttribute: (_) => de_DocumentAttribute(_),
        ExpandedResults: (_) => de_ExpandedResultList(_),
    });
};
const de_CustomDocumentEnrichmentConfiguration = (output, context) => {
    return smithyClient.take(output, {
        InlineConfigurations: (_) => de_InlineCustomDocumentEnrichmentConfigurationList(_),
        PostExtractionHookConfiguration: (_) => de_HookConfiguration(_),
        PreExtractionHookConfiguration: (_) => de_HookConfiguration(_),
        RoleArn: smithyClient.expectString,
    });
};
const de_DataSourceConfiguration = (output, context) => {
    return smithyClient.take(output, {
        AlfrescoConfiguration: smithyClient._json,
        BoxConfiguration: smithyClient._json,
        ConfluenceConfiguration: smithyClient._json,
        DatabaseConfiguration: smithyClient._json,
        FsxConfiguration: smithyClient._json,
        GitHubConfiguration: smithyClient._json,
        GoogleDriveConfiguration: smithyClient._json,
        JiraConfiguration: smithyClient._json,
        OneDriveConfiguration: smithyClient._json,
        QuipConfiguration: smithyClient._json,
        S3Configuration: smithyClient._json,
        SalesforceConfiguration: smithyClient._json,
        ServiceNowConfiguration: smithyClient._json,
        SharePointConfiguration: smithyClient._json,
        SlackConfiguration: smithyClient._json,
        TemplateConfiguration: (_) => de_TemplateConfiguration(_),
        WebCrawlerConfiguration: (_) => de_WebCrawlerConfiguration(_),
        WorkDocsConfiguration: smithyClient._json,
    });
};
const de_DataSourceSummary = (output, context) => {
    return smithyClient.take(output, {
        CreatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Id: smithyClient.expectString,
        LanguageCode: smithyClient.expectString,
        Name: smithyClient.expectString,
        Status: smithyClient.expectString,
        Type: smithyClient.expectString,
        UpdatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_DataSourceSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataSourceSummary(entry);
    });
    return retVal;
};
const de_DataSourceSyncJob = (output, context) => {
    return smithyClient.take(output, {
        DataSourceErrorCode: smithyClient.expectString,
        EndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ErrorCode: smithyClient.expectString,
        ErrorMessage: smithyClient.expectString,
        ExecutionId: smithyClient.expectString,
        Metrics: smithyClient._json,
        StartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Status: smithyClient.expectString,
    });
};
const de_DataSourceSyncJobHistoryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataSourceSyncJob(entry);
    });
    return retVal;
};
const de_DescribeDataSourceResponse = (output, context) => {
    return smithyClient.take(output, {
        Configuration: (_) => de_DataSourceConfiguration(_),
        CreatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        CustomDocumentEnrichmentConfiguration: (_) => de_CustomDocumentEnrichmentConfiguration(_),
        Description: smithyClient.expectString,
        ErrorMessage: smithyClient.expectString,
        Id: smithyClient.expectString,
        IndexId: smithyClient.expectString,
        LanguageCode: smithyClient.expectString,
        Name: smithyClient.expectString,
        RoleArn: smithyClient.expectString,
        Schedule: smithyClient.expectString,
        Status: smithyClient.expectString,
        Type: smithyClient.expectString,
        UpdatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        VpcConfiguration: smithyClient._json,
    });
};
const de_DescribeExperienceResponse = (output, context) => {
    return smithyClient.take(output, {
        Configuration: smithyClient._json,
        CreatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        Endpoints: smithyClient._json,
        ErrorMessage: smithyClient.expectString,
        Id: smithyClient.expectString,
        IndexId: smithyClient.expectString,
        Name: smithyClient.expectString,
        RoleArn: smithyClient.expectString,
        Status: smithyClient.expectString,
        UpdatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_DescribeFaqResponse = (output, context) => {
    return smithyClient.take(output, {
        CreatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        ErrorMessage: smithyClient.expectString,
        FileFormat: smithyClient.expectString,
        Id: smithyClient.expectString,
        IndexId: smithyClient.expectString,
        LanguageCode: smithyClient.expectString,
        Name: smithyClient.expectString,
        RoleArn: smithyClient.expectString,
        S3Path: smithyClient._json,
        Status: smithyClient.expectString,
        UpdatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_DescribeIndexResponse = (output, context) => {
    return smithyClient.take(output, {
        CapacityUnits: smithyClient._json,
        CreatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        DocumentMetadataConfigurations: smithyClient._json,
        Edition: smithyClient.expectString,
        ErrorMessage: smithyClient.expectString,
        Id: smithyClient.expectString,
        IndexStatistics: smithyClient._json,
        Name: smithyClient.expectString,
        RoleArn: smithyClient.expectString,
        ServerSideEncryptionConfiguration: smithyClient._json,
        Status: smithyClient.expectString,
        UpdatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        UserContextPolicy: smithyClient.expectString,
        UserGroupResolutionConfiguration: smithyClient._json,
        UserTokenConfigurations: smithyClient._json,
    });
};
const de_DescribePrincipalMappingResponse = (output, context) => {
    return smithyClient.take(output, {
        DataSourceId: smithyClient.expectString,
        GroupId: smithyClient.expectString,
        GroupOrderingIdSummaries: (_) => de_GroupOrderingIdSummaries(_),
        IndexId: smithyClient.expectString,
    });
};
const de_DescribeQuerySuggestionsBlockListResponse = (output, context) => {
    return smithyClient.take(output, {
        CreatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        ErrorMessage: smithyClient.expectString,
        FileSizeBytes: smithyClient.expectLong,
        Id: smithyClient.expectString,
        IndexId: smithyClient.expectString,
        ItemCount: smithyClient.expectInt32,
        Name: smithyClient.expectString,
        RoleArn: smithyClient.expectString,
        SourceS3Path: smithyClient._json,
        Status: smithyClient.expectString,
        UpdatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_DescribeQuerySuggestionsConfigResponse = (output, context) => {
    return smithyClient.take(output, {
        AttributeSuggestionsConfig: smithyClient._json,
        IncludeQueriesWithoutUserInformation: smithyClient.expectBoolean,
        LastClearTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastSuggestionsBuildTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        MinimumNumberOfQueryingUsers: smithyClient.expectInt32,
        MinimumQueryCount: smithyClient.expectInt32,
        Mode: smithyClient.expectString,
        QueryLogLookBackWindowInDays: smithyClient.expectInt32,
        Status: smithyClient.expectString,
        TotalSuggestionsCount: smithyClient.expectInt32,
    });
};
const de_DescribeThesaurusResponse = (output, context) => {
    return smithyClient.take(output, {
        CreatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        ErrorMessage: smithyClient.expectString,
        FileSizeBytes: smithyClient.expectLong,
        Id: smithyClient.expectString,
        IndexId: smithyClient.expectString,
        Name: smithyClient.expectString,
        RoleArn: smithyClient.expectString,
        SourceS3Path: smithyClient._json,
        Status: smithyClient.expectString,
        SynonymRuleCount: smithyClient.expectLong,
        TermCount: smithyClient.expectLong,
        UpdatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_DocumentAttribute = (output, context) => {
    return smithyClient.take(output, {
        Key: smithyClient.expectString,
        Value: (_) => de_DocumentAttributeValue(_),
    });
};
const de_DocumentAttributeCondition = (output, context) => {
    return smithyClient.take(output, {
        ConditionDocumentAttributeKey: smithyClient.expectString,
        ConditionOnValue: (_) => de_DocumentAttributeValue(_),
        Operator: smithyClient.expectString,
    });
};
const de_DocumentAttributeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DocumentAttribute(entry);
    });
    return retVal;
};
const de_DocumentAttributeTarget = (output, context) => {
    return smithyClient.take(output, {
        TargetDocumentAttributeKey: smithyClient.expectString,
        TargetDocumentAttributeValue: (_) => de_DocumentAttributeValue(_),
        TargetDocumentAttributeValueDeletion: smithyClient.expectBoolean,
    });
};
const de_DocumentAttributeValue = (output, context) => {
    return smithyClient.take(output, {
        DateValue: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LongValue: smithyClient.expectLong,
        StringListValue: smithyClient._json,
        StringValue: smithyClient.expectString,
    });
};
const de_DocumentAttributeValueCountPair = (output, context) => {
    return smithyClient.take(output, {
        Count: smithyClient.expectInt32,
        DocumentAttributeValue: (_) => de_DocumentAttributeValue(_),
        FacetResults: (_) => de_FacetResultList(_),
    });
};
const de_DocumentAttributeValueCountPairList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DocumentAttributeValueCountPair(entry);
    });
    return retVal;
};
const de_ExpandedResultItem = (output, context) => {
    return smithyClient.take(output, {
        DocumentAttributes: (_) => de_DocumentAttributeList(_),
        DocumentExcerpt: smithyClient._json,
        DocumentId: smithyClient.expectString,
        DocumentTitle: smithyClient._json,
        DocumentURI: smithyClient.expectString,
        Id: smithyClient.expectString,
    });
};
const de_ExpandedResultList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ExpandedResultItem(entry);
    });
    return retVal;
};
const de_ExperiencesSummary = (output, context) => {
    return smithyClient.take(output, {
        CreatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Endpoints: smithyClient._json,
        Id: smithyClient.expectString,
        Name: smithyClient.expectString,
        Status: smithyClient.expectString,
    });
};
const de_ExperiencesSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ExperiencesSummary(entry);
    });
    return retVal;
};
const de_FacetResult = (output, context) => {
    return smithyClient.take(output, {
        DocumentAttributeKey: smithyClient.expectString,
        DocumentAttributeValueCountPairs: (_) => de_DocumentAttributeValueCountPairList(_),
        DocumentAttributeValueType: smithyClient.expectString,
    });
};
const de_FacetResultList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FacetResult(entry);
    });
    return retVal;
};
const de_FaqSummary = (output, context) => {
    return smithyClient.take(output, {
        CreatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        FileFormat: smithyClient.expectString,
        Id: smithyClient.expectString,
        LanguageCode: smithyClient.expectString,
        Name: smithyClient.expectString,
        Status: smithyClient.expectString,
        UpdatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_FaqSummaryItems = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FaqSummary(entry);
    });
    return retVal;
};
const de_FeaturedResultsItem = (output, context) => {
    return smithyClient.take(output, {
        AdditionalAttributes: smithyClient._json,
        DocumentAttributes: (_) => de_DocumentAttributeList(_),
        DocumentExcerpt: smithyClient._json,
        DocumentId: smithyClient.expectString,
        DocumentTitle: smithyClient._json,
        DocumentURI: smithyClient.expectString,
        FeedbackToken: smithyClient.expectString,
        Id: smithyClient.expectString,
        Type: smithyClient.expectString,
    });
};
const de_FeaturedResultsItemList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FeaturedResultsItem(entry);
    });
    return retVal;
};
const de_GetQuerySuggestionsResponse = (output, context) => {
    return smithyClient.take(output, {
        QuerySuggestionsId: smithyClient.expectString,
        Suggestions: (_) => de_SuggestionList(_),
    });
};
const de_GetSnapshotsResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        SnapShotTimeFilter: (_) => de_TimeRange(_),
        SnapshotsData: smithyClient._json,
        SnapshotsDataHeader: smithyClient._json,
    });
};
const de_GroupOrderingIdSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_GroupOrderingIdSummary(entry);
    });
    return retVal;
};
const de_GroupOrderingIdSummary = (output, context) => {
    return smithyClient.take(output, {
        FailureReason: smithyClient.expectString,
        LastUpdatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        OrderingId: smithyClient.expectLong,
        ReceivedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Status: smithyClient.expectString,
    });
};
const de_HookConfiguration = (output, context) => {
    return smithyClient.take(output, {
        InvocationCondition: (_) => de_DocumentAttributeCondition(_),
        LambdaArn: smithyClient.expectString,
        S3Bucket: smithyClient.expectString,
    });
};
const de_IndexConfigurationSummary = (output, context) => {
    return smithyClient.take(output, {
        CreatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Edition: smithyClient.expectString,
        Id: smithyClient.expectString,
        Name: smithyClient.expectString,
        Status: smithyClient.expectString,
        UpdatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_IndexConfigurationSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IndexConfigurationSummary(entry);
    });
    return retVal;
};
const de_InlineCustomDocumentEnrichmentConfiguration = (output, context) => {
    return smithyClient.take(output, {
        Condition: (_) => de_DocumentAttributeCondition(_),
        DocumentContentDeletion: smithyClient.expectBoolean,
        Target: (_) => de_DocumentAttributeTarget(_),
    });
};
const de_InlineCustomDocumentEnrichmentConfigurationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InlineCustomDocumentEnrichmentConfiguration(entry);
    });
    return retVal;
};
const de_ListDataSourcesResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        SummaryItems: (_) => de_DataSourceSummaryList(_),
    });
};
const de_ListDataSourceSyncJobsResponse = (output, context) => {
    return smithyClient.take(output, {
        History: (_) => de_DataSourceSyncJobHistoryList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListEntityPersonasResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        SummaryItems: (_) => de_PersonasSummaryList(_),
    });
};
const de_ListExperiencesResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        SummaryItems: (_) => de_ExperiencesSummaryList(_),
    });
};
const de_ListFaqsResponse = (output, context) => {
    return smithyClient.take(output, {
        FaqSummaryItems: (_) => de_FaqSummaryItems(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListIndicesResponse = (output, context) => {
    return smithyClient.take(output, {
        IndexConfigurationSummaryItems: (_) => de_IndexConfigurationSummaryList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListQuerySuggestionsBlockListsResponse = (output, context) => {
    return smithyClient.take(output, {
        BlockListSummaryItems: (_) => de_QuerySuggestionsBlockListSummaryItems(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListThesauriResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        ThesaurusSummaryItems: (_) => de_ThesaurusSummaryItems(_),
    });
};
const de_PersonasSummary = (output, context) => {
    return smithyClient.take(output, {
        CreatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        EntityId: smithyClient.expectString,
        Persona: smithyClient.expectString,
        UpdatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_PersonasSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PersonasSummary(entry);
    });
    return retVal;
};
const de_QueryResult = (output, context) => {
    return smithyClient.take(output, {
        FacetResults: (_) => de_FacetResultList(_),
        FeaturedResultsItems: (_) => de_FeaturedResultsItemList(_),
        QueryId: smithyClient.expectString,
        ResultItems: (_) => de_QueryResultItemList(_),
        SpellCorrectedQueries: smithyClient._json,
        TotalNumberOfResults: smithyClient.expectInt32,
        Warnings: smithyClient._json,
    });
};
const de_QueryResultItem = (output, context) => {
    return smithyClient.take(output, {
        AdditionalAttributes: smithyClient._json,
        CollapsedResultDetail: (_) => de_CollapsedResultDetail(_),
        DocumentAttributes: (_) => de_DocumentAttributeList(_),
        DocumentExcerpt: smithyClient._json,
        DocumentId: smithyClient.expectString,
        DocumentTitle: smithyClient._json,
        DocumentURI: smithyClient.expectString,
        FeedbackToken: smithyClient.expectString,
        Format: smithyClient.expectString,
        Id: smithyClient.expectString,
        ScoreAttributes: smithyClient._json,
        TableExcerpt: smithyClient._json,
        Type: smithyClient.expectString,
    });
};
const de_QueryResultItemList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_QueryResultItem(entry);
    });
    return retVal;
};
const de_QuerySuggestionsBlockListSummary = (output, context) => {
    return smithyClient.take(output, {
        CreatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Id: smithyClient.expectString,
        ItemCount: smithyClient.expectInt32,
        Name: smithyClient.expectString,
        Status: smithyClient.expectString,
        UpdatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_QuerySuggestionsBlockListSummaryItems = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_QuerySuggestionsBlockListSummary(entry);
    });
    return retVal;
};
const de_RetrieveResult = (output, context) => {
    return smithyClient.take(output, {
        QueryId: smithyClient.expectString,
        ResultItems: (_) => de_RetrieveResultItemList(_),
    });
};
const de_RetrieveResultItem = (output, context) => {
    return smithyClient.take(output, {
        Content: smithyClient.expectString,
        DocumentAttributes: (_) => de_DocumentAttributeList(_),
        DocumentId: smithyClient.expectString,
        DocumentTitle: smithyClient.expectString,
        DocumentURI: smithyClient.expectString,
        Id: smithyClient.expectString,
        ScoreAttributes: smithyClient._json,
    });
};
const de_RetrieveResultItemList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RetrieveResultItem(entry);
    });
    return retVal;
};
const de_SourceDocument = (output, context) => {
    return smithyClient.take(output, {
        AdditionalAttributes: (_) => de_DocumentAttributeList(_),
        DocumentId: smithyClient.expectString,
        SuggestionAttributes: smithyClient._json,
    });
};
const de_SourceDocuments = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SourceDocument(entry);
    });
    return retVal;
};
const de_Suggestion = (output, context) => {
    return smithyClient.take(output, {
        Id: smithyClient.expectString,
        SourceDocuments: (_) => de_SourceDocuments(_),
        Value: smithyClient._json,
    });
};
const de_SuggestionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Suggestion(entry);
    });
    return retVal;
};
const de_Template = (output, context) => {
    return output;
};
const de_TemplateConfiguration = (output, context) => {
    return smithyClient.take(output, {
        Template: (_) => de_Template(_),
    });
};
const de_ThesaurusSummary = (output, context) => {
    return smithyClient.take(output, {
        CreatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Id: smithyClient.expectString,
        Name: smithyClient.expectString,
        Status: smithyClient.expectString,
        UpdatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_ThesaurusSummaryItems = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ThesaurusSummary(entry);
    });
    return retVal;
};
const de_TimeRange = (output, context) => {
    return smithyClient.take(output, {
        EndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        StartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_WebCrawlerConfiguration = (output, context) => {
    return smithyClient.take(output, {
        AuthenticationConfiguration: smithyClient._json,
        CrawlDepth: smithyClient.expectInt32,
        MaxContentSizePerPageInMegaBytes: smithyClient.limitedParseFloat32,
        MaxLinksPerPage: smithyClient.expectInt32,
        MaxUrlsPerMinuteCrawlRate: smithyClient.expectInt32,
        ProxyConfiguration: smithyClient._json,
        UrlExclusionPatterns: smithyClient._json,
        UrlInclusionPatterns: smithyClient._json,
        Urls: smithyClient._json,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const throwDefaultError = smithyClient.withBaseException(KendraServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocolHttp.HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `AWSKendraFrontendService.${operation}`,
    };
}

class AssociateEntitiesToExperienceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "AssociateEntitiesToExperience", {})
    .n("KendraClient", "AssociateEntitiesToExperienceCommand")
    .f(void 0, void 0)
    .ser(se_AssociateEntitiesToExperienceCommand)
    .de(de_AssociateEntitiesToExperienceCommand)
    .build() {
}

class AssociatePersonasToEntitiesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "AssociatePersonasToEntities", {})
    .n("KendraClient", "AssociatePersonasToEntitiesCommand")
    .f(void 0, void 0)
    .ser(se_AssociatePersonasToEntitiesCommand)
    .de(de_AssociatePersonasToEntitiesCommand)
    .build() {
}

class BatchDeleteDocumentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "BatchDeleteDocument", {})
    .n("KendraClient", "BatchDeleteDocumentCommand")
    .f(void 0, void 0)
    .ser(se_BatchDeleteDocumentCommand)
    .de(de_BatchDeleteDocumentCommand)
    .build() {
}

class BatchDeleteFeaturedResultsSetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "BatchDeleteFeaturedResultsSet", {})
    .n("KendraClient", "BatchDeleteFeaturedResultsSetCommand")
    .f(void 0, void 0)
    .ser(se_BatchDeleteFeaturedResultsSetCommand)
    .de(de_BatchDeleteFeaturedResultsSetCommand)
    .build() {
}

class BatchGetDocumentStatusCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "BatchGetDocumentStatus", {})
    .n("KendraClient", "BatchGetDocumentStatusCommand")
    .f(void 0, void 0)
    .ser(se_BatchGetDocumentStatusCommand)
    .de(de_BatchGetDocumentStatusCommand)
    .build() {
}

class BatchPutDocumentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "BatchPutDocument", {})
    .n("KendraClient", "BatchPutDocumentCommand")
    .f(void 0, void 0)
    .ser(se_BatchPutDocumentCommand)
    .de(de_BatchPutDocumentCommand)
    .build() {
}

class ClearQuerySuggestionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "ClearQuerySuggestions", {})
    .n("KendraClient", "ClearQuerySuggestionsCommand")
    .f(void 0, void 0)
    .ser(se_ClearQuerySuggestionsCommand)
    .de(de_ClearQuerySuggestionsCommand)
    .build() {
}

class CreateAccessControlConfigurationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "CreateAccessControlConfiguration", {})
    .n("KendraClient", "CreateAccessControlConfigurationCommand")
    .f(void 0, void 0)
    .ser(se_CreateAccessControlConfigurationCommand)
    .de(de_CreateAccessControlConfigurationCommand)
    .build() {
}

class CreateDataSourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "CreateDataSource", {})
    .n("KendraClient", "CreateDataSourceCommand")
    .f(void 0, void 0)
    .ser(se_CreateDataSourceCommand)
    .de(de_CreateDataSourceCommand)
    .build() {
}

class CreateExperienceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "CreateExperience", {})
    .n("KendraClient", "CreateExperienceCommand")
    .f(void 0, void 0)
    .ser(se_CreateExperienceCommand)
    .de(de_CreateExperienceCommand)
    .build() {
}

class CreateFaqCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "CreateFaq", {})
    .n("KendraClient", "CreateFaqCommand")
    .f(void 0, void 0)
    .ser(se_CreateFaqCommand)
    .de(de_CreateFaqCommand)
    .build() {
}

class CreateFeaturedResultsSetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "CreateFeaturedResultsSet", {})
    .n("KendraClient", "CreateFeaturedResultsSetCommand")
    .f(void 0, void 0)
    .ser(se_CreateFeaturedResultsSetCommand)
    .de(de_CreateFeaturedResultsSetCommand)
    .build() {
}

class CreateIndexCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "CreateIndex", {})
    .n("KendraClient", "CreateIndexCommand")
    .f(CreateIndexRequestFilterSensitiveLog, void 0)
    .ser(se_CreateIndexCommand)
    .de(de_CreateIndexCommand)
    .build() {
}

class CreateQuerySuggestionsBlockListCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "CreateQuerySuggestionsBlockList", {})
    .n("KendraClient", "CreateQuerySuggestionsBlockListCommand")
    .f(void 0, void 0)
    .ser(se_CreateQuerySuggestionsBlockListCommand)
    .de(de_CreateQuerySuggestionsBlockListCommand)
    .build() {
}

class CreateThesaurusCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "CreateThesaurus", {})
    .n("KendraClient", "CreateThesaurusCommand")
    .f(void 0, void 0)
    .ser(se_CreateThesaurusCommand)
    .de(de_CreateThesaurusCommand)
    .build() {
}

class DeleteAccessControlConfigurationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "DeleteAccessControlConfiguration", {})
    .n("KendraClient", "DeleteAccessControlConfigurationCommand")
    .f(void 0, void 0)
    .ser(se_DeleteAccessControlConfigurationCommand)
    .de(de_DeleteAccessControlConfigurationCommand)
    .build() {
}

class DeleteDataSourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "DeleteDataSource", {})
    .n("KendraClient", "DeleteDataSourceCommand")
    .f(void 0, void 0)
    .ser(se_DeleteDataSourceCommand)
    .de(de_DeleteDataSourceCommand)
    .build() {
}

class DeleteExperienceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "DeleteExperience", {})
    .n("KendraClient", "DeleteExperienceCommand")
    .f(void 0, void 0)
    .ser(se_DeleteExperienceCommand)
    .de(de_DeleteExperienceCommand)
    .build() {
}

class DeleteFaqCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "DeleteFaq", {})
    .n("KendraClient", "DeleteFaqCommand")
    .f(void 0, void 0)
    .ser(se_DeleteFaqCommand)
    .de(de_DeleteFaqCommand)
    .build() {
}

class DeleteIndexCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "DeleteIndex", {})
    .n("KendraClient", "DeleteIndexCommand")
    .f(void 0, void 0)
    .ser(se_DeleteIndexCommand)
    .de(de_DeleteIndexCommand)
    .build() {
}

class DeletePrincipalMappingCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "DeletePrincipalMapping", {})
    .n("KendraClient", "DeletePrincipalMappingCommand")
    .f(void 0, void 0)
    .ser(se_DeletePrincipalMappingCommand)
    .de(de_DeletePrincipalMappingCommand)
    .build() {
}

class DeleteQuerySuggestionsBlockListCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "DeleteQuerySuggestionsBlockList", {})
    .n("KendraClient", "DeleteQuerySuggestionsBlockListCommand")
    .f(void 0, void 0)
    .ser(se_DeleteQuerySuggestionsBlockListCommand)
    .de(de_DeleteQuerySuggestionsBlockListCommand)
    .build() {
}

class DeleteThesaurusCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "DeleteThesaurus", {})
    .n("KendraClient", "DeleteThesaurusCommand")
    .f(void 0, void 0)
    .ser(se_DeleteThesaurusCommand)
    .de(de_DeleteThesaurusCommand)
    .build() {
}

class DescribeAccessControlConfigurationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "DescribeAccessControlConfiguration", {})
    .n("KendraClient", "DescribeAccessControlConfigurationCommand")
    .f(void 0, void 0)
    .ser(se_DescribeAccessControlConfigurationCommand)
    .de(de_DescribeAccessControlConfigurationCommand)
    .build() {
}

class DescribeDataSourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "DescribeDataSource", {})
    .n("KendraClient", "DescribeDataSourceCommand")
    .f(void 0, void 0)
    .ser(se_DescribeDataSourceCommand)
    .de(de_DescribeDataSourceCommand)
    .build() {
}

class DescribeExperienceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "DescribeExperience", {})
    .n("KendraClient", "DescribeExperienceCommand")
    .f(void 0, void 0)
    .ser(se_DescribeExperienceCommand)
    .de(de_DescribeExperienceCommand)
    .build() {
}

class DescribeFaqCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "DescribeFaq", {})
    .n("KendraClient", "DescribeFaqCommand")
    .f(void 0, void 0)
    .ser(se_DescribeFaqCommand)
    .de(de_DescribeFaqCommand)
    .build() {
}

class DescribeFeaturedResultsSetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "DescribeFeaturedResultsSet", {})
    .n("KendraClient", "DescribeFeaturedResultsSetCommand")
    .f(void 0, void 0)
    .ser(se_DescribeFeaturedResultsSetCommand)
    .de(de_DescribeFeaturedResultsSetCommand)
    .build() {
}

class DescribeIndexCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "DescribeIndex", {})
    .n("KendraClient", "DescribeIndexCommand")
    .f(void 0, DescribeIndexResponseFilterSensitiveLog)
    .ser(se_DescribeIndexCommand)
    .de(de_DescribeIndexCommand)
    .build() {
}

class DescribePrincipalMappingCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "DescribePrincipalMapping", {})
    .n("KendraClient", "DescribePrincipalMappingCommand")
    .f(void 0, void 0)
    .ser(se_DescribePrincipalMappingCommand)
    .de(de_DescribePrincipalMappingCommand)
    .build() {
}

class DescribeQuerySuggestionsBlockListCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "DescribeQuerySuggestionsBlockList", {})
    .n("KendraClient", "DescribeQuerySuggestionsBlockListCommand")
    .f(void 0, void 0)
    .ser(se_DescribeQuerySuggestionsBlockListCommand)
    .de(de_DescribeQuerySuggestionsBlockListCommand)
    .build() {
}

class DescribeQuerySuggestionsConfigCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "DescribeQuerySuggestionsConfig", {})
    .n("KendraClient", "DescribeQuerySuggestionsConfigCommand")
    .f(void 0, void 0)
    .ser(se_DescribeQuerySuggestionsConfigCommand)
    .de(de_DescribeQuerySuggestionsConfigCommand)
    .build() {
}

class DescribeThesaurusCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "DescribeThesaurus", {})
    .n("KendraClient", "DescribeThesaurusCommand")
    .f(void 0, void 0)
    .ser(se_DescribeThesaurusCommand)
    .de(de_DescribeThesaurusCommand)
    .build() {
}

class DisassociateEntitiesFromExperienceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "DisassociateEntitiesFromExperience", {})
    .n("KendraClient", "DisassociateEntitiesFromExperienceCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateEntitiesFromExperienceCommand)
    .de(de_DisassociateEntitiesFromExperienceCommand)
    .build() {
}

class DisassociatePersonasFromEntitiesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "DisassociatePersonasFromEntities", {})
    .n("KendraClient", "DisassociatePersonasFromEntitiesCommand")
    .f(void 0, void 0)
    .ser(se_DisassociatePersonasFromEntitiesCommand)
    .de(de_DisassociatePersonasFromEntitiesCommand)
    .build() {
}

class GetQuerySuggestionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "GetQuerySuggestions", {})
    .n("KendraClient", "GetQuerySuggestionsCommand")
    .f(void 0, void 0)
    .ser(se_GetQuerySuggestionsCommand)
    .de(de_GetQuerySuggestionsCommand)
    .build() {
}

class GetSnapshotsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "GetSnapshots", {})
    .n("KendraClient", "GetSnapshotsCommand")
    .f(void 0, void 0)
    .ser(se_GetSnapshotsCommand)
    .de(de_GetSnapshotsCommand)
    .build() {
}

class ListAccessControlConfigurationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "ListAccessControlConfigurations", {})
    .n("KendraClient", "ListAccessControlConfigurationsCommand")
    .f(void 0, void 0)
    .ser(se_ListAccessControlConfigurationsCommand)
    .de(de_ListAccessControlConfigurationsCommand)
    .build() {
}

class ListDataSourcesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "ListDataSources", {})
    .n("KendraClient", "ListDataSourcesCommand")
    .f(void 0, void 0)
    .ser(se_ListDataSourcesCommand)
    .de(de_ListDataSourcesCommand)
    .build() {
}

class ListDataSourceSyncJobsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "ListDataSourceSyncJobs", {})
    .n("KendraClient", "ListDataSourceSyncJobsCommand")
    .f(void 0, void 0)
    .ser(se_ListDataSourceSyncJobsCommand)
    .de(de_ListDataSourceSyncJobsCommand)
    .build() {
}

class ListEntityPersonasCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "ListEntityPersonas", {})
    .n("KendraClient", "ListEntityPersonasCommand")
    .f(void 0, void 0)
    .ser(se_ListEntityPersonasCommand)
    .de(de_ListEntityPersonasCommand)
    .build() {
}

class ListExperienceEntitiesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "ListExperienceEntities", {})
    .n("KendraClient", "ListExperienceEntitiesCommand")
    .f(void 0, ListExperienceEntitiesResponseFilterSensitiveLog)
    .ser(se_ListExperienceEntitiesCommand)
    .de(de_ListExperienceEntitiesCommand)
    .build() {
}

class ListExperiencesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "ListExperiences", {})
    .n("KendraClient", "ListExperiencesCommand")
    .f(void 0, void 0)
    .ser(se_ListExperiencesCommand)
    .de(de_ListExperiencesCommand)
    .build() {
}

class ListFaqsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "ListFaqs", {})
    .n("KendraClient", "ListFaqsCommand")
    .f(void 0, void 0)
    .ser(se_ListFaqsCommand)
    .de(de_ListFaqsCommand)
    .build() {
}

class ListFeaturedResultsSetsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "ListFeaturedResultsSets", {})
    .n("KendraClient", "ListFeaturedResultsSetsCommand")
    .f(void 0, void 0)
    .ser(se_ListFeaturedResultsSetsCommand)
    .de(de_ListFeaturedResultsSetsCommand)
    .build() {
}

class ListGroupsOlderThanOrderingIdCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "ListGroupsOlderThanOrderingId", {})
    .n("KendraClient", "ListGroupsOlderThanOrderingIdCommand")
    .f(void 0, void 0)
    .ser(se_ListGroupsOlderThanOrderingIdCommand)
    .de(de_ListGroupsOlderThanOrderingIdCommand)
    .build() {
}

class ListIndicesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "ListIndices", {})
    .n("KendraClient", "ListIndicesCommand")
    .f(void 0, void 0)
    .ser(se_ListIndicesCommand)
    .de(de_ListIndicesCommand)
    .build() {
}

class ListQuerySuggestionsBlockListsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "ListQuerySuggestionsBlockLists", {})
    .n("KendraClient", "ListQuerySuggestionsBlockListsCommand")
    .f(void 0, void 0)
    .ser(se_ListQuerySuggestionsBlockListsCommand)
    .de(de_ListQuerySuggestionsBlockListsCommand)
    .build() {
}

class ListTagsForResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "ListTagsForResource", {})
    .n("KendraClient", "ListTagsForResourceCommand")
    .f(void 0, void 0)
    .ser(se_ListTagsForResourceCommand)
    .de(de_ListTagsForResourceCommand)
    .build() {
}

class ListThesauriCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "ListThesauri", {})
    .n("KendraClient", "ListThesauriCommand")
    .f(void 0, void 0)
    .ser(se_ListThesauriCommand)
    .de(de_ListThesauriCommand)
    .build() {
}

class PutPrincipalMappingCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "PutPrincipalMapping", {})
    .n("KendraClient", "PutPrincipalMappingCommand")
    .f(void 0, void 0)
    .ser(se_PutPrincipalMappingCommand)
    .de(de_PutPrincipalMappingCommand)
    .build() {
}

class QueryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "Query", {})
    .n("KendraClient", "QueryCommand")
    .f(void 0, void 0)
    .ser(se_QueryCommand)
    .de(de_QueryCommand)
    .build() {
}

class RetrieveCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "Retrieve", {})
    .n("KendraClient", "RetrieveCommand")
    .f(void 0, void 0)
    .ser(se_RetrieveCommand)
    .de(de_RetrieveCommand)
    .build() {
}

class StartDataSourceSyncJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "StartDataSourceSyncJob", {})
    .n("KendraClient", "StartDataSourceSyncJobCommand")
    .f(void 0, void 0)
    .ser(se_StartDataSourceSyncJobCommand)
    .de(de_StartDataSourceSyncJobCommand)
    .build() {
}

class StopDataSourceSyncJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "StopDataSourceSyncJob", {})
    .n("KendraClient", "StopDataSourceSyncJobCommand")
    .f(void 0, void 0)
    .ser(se_StopDataSourceSyncJobCommand)
    .de(de_StopDataSourceSyncJobCommand)
    .build() {
}

class SubmitFeedbackCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "SubmitFeedback", {})
    .n("KendraClient", "SubmitFeedbackCommand")
    .f(void 0, void 0)
    .ser(se_SubmitFeedbackCommand)
    .de(de_SubmitFeedbackCommand)
    .build() {
}

class TagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "TagResource", {})
    .n("KendraClient", "TagResourceCommand")
    .f(void 0, void 0)
    .ser(se_TagResourceCommand)
    .de(de_TagResourceCommand)
    .build() {
}

class UntagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "UntagResource", {})
    .n("KendraClient", "UntagResourceCommand")
    .f(void 0, void 0)
    .ser(se_UntagResourceCommand)
    .de(de_UntagResourceCommand)
    .build() {
}

class UpdateAccessControlConfigurationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "UpdateAccessControlConfiguration", {})
    .n("KendraClient", "UpdateAccessControlConfigurationCommand")
    .f(void 0, void 0)
    .ser(se_UpdateAccessControlConfigurationCommand)
    .de(de_UpdateAccessControlConfigurationCommand)
    .build() {
}

class UpdateDataSourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "UpdateDataSource", {})
    .n("KendraClient", "UpdateDataSourceCommand")
    .f(void 0, void 0)
    .ser(se_UpdateDataSourceCommand)
    .de(de_UpdateDataSourceCommand)
    .build() {
}

class UpdateExperienceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "UpdateExperience", {})
    .n("KendraClient", "UpdateExperienceCommand")
    .f(void 0, void 0)
    .ser(se_UpdateExperienceCommand)
    .de(de_UpdateExperienceCommand)
    .build() {
}

class UpdateFeaturedResultsSetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "UpdateFeaturedResultsSet", {})
    .n("KendraClient", "UpdateFeaturedResultsSetCommand")
    .f(void 0, void 0)
    .ser(se_UpdateFeaturedResultsSetCommand)
    .de(de_UpdateFeaturedResultsSetCommand)
    .build() {
}

class UpdateIndexCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "UpdateIndex", {})
    .n("KendraClient", "UpdateIndexCommand")
    .f(void 0, void 0)
    .ser(se_UpdateIndexCommand)
    .de(de_UpdateIndexCommand)
    .build() {
}

class UpdateQuerySuggestionsBlockListCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "UpdateQuerySuggestionsBlockList", {})
    .n("KendraClient", "UpdateQuerySuggestionsBlockListCommand")
    .f(void 0, void 0)
    .ser(se_UpdateQuerySuggestionsBlockListCommand)
    .de(de_UpdateQuerySuggestionsBlockListCommand)
    .build() {
}

class UpdateQuerySuggestionsConfigCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "UpdateQuerySuggestionsConfig", {})
    .n("KendraClient", "UpdateQuerySuggestionsConfigCommand")
    .f(void 0, void 0)
    .ser(se_UpdateQuerySuggestionsConfigCommand)
    .de(de_UpdateQuerySuggestionsConfigCommand)
    .build() {
}

class UpdateThesaurusCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSKendraFrontendService", "UpdateThesaurus", {})
    .n("KendraClient", "UpdateThesaurusCommand")
    .f(void 0, void 0)
    .ser(se_UpdateThesaurusCommand)
    .de(de_UpdateThesaurusCommand)
    .build() {
}

const commands = {
    AssociateEntitiesToExperienceCommand,
    AssociatePersonasToEntitiesCommand,
    BatchDeleteDocumentCommand,
    BatchDeleteFeaturedResultsSetCommand,
    BatchGetDocumentStatusCommand,
    BatchPutDocumentCommand,
    ClearQuerySuggestionsCommand,
    CreateAccessControlConfigurationCommand,
    CreateDataSourceCommand,
    CreateExperienceCommand,
    CreateFaqCommand,
    CreateFeaturedResultsSetCommand,
    CreateIndexCommand,
    CreateQuerySuggestionsBlockListCommand,
    CreateThesaurusCommand,
    DeleteAccessControlConfigurationCommand,
    DeleteDataSourceCommand,
    DeleteExperienceCommand,
    DeleteFaqCommand,
    DeleteIndexCommand,
    DeletePrincipalMappingCommand,
    DeleteQuerySuggestionsBlockListCommand,
    DeleteThesaurusCommand,
    DescribeAccessControlConfigurationCommand,
    DescribeDataSourceCommand,
    DescribeExperienceCommand,
    DescribeFaqCommand,
    DescribeFeaturedResultsSetCommand,
    DescribeIndexCommand,
    DescribePrincipalMappingCommand,
    DescribeQuerySuggestionsBlockListCommand,
    DescribeQuerySuggestionsConfigCommand,
    DescribeThesaurusCommand,
    DisassociateEntitiesFromExperienceCommand,
    DisassociatePersonasFromEntitiesCommand,
    GetQuerySuggestionsCommand,
    GetSnapshotsCommand,
    ListAccessControlConfigurationsCommand,
    ListDataSourcesCommand,
    ListDataSourceSyncJobsCommand,
    ListEntityPersonasCommand,
    ListExperienceEntitiesCommand,
    ListExperiencesCommand,
    ListFaqsCommand,
    ListFeaturedResultsSetsCommand,
    ListGroupsOlderThanOrderingIdCommand,
    ListIndicesCommand,
    ListQuerySuggestionsBlockListsCommand,
    ListTagsForResourceCommand,
    ListThesauriCommand,
    PutPrincipalMappingCommand,
    QueryCommand,
    RetrieveCommand,
    StartDataSourceSyncJobCommand,
    StopDataSourceSyncJobCommand,
    SubmitFeedbackCommand,
    TagResourceCommand,
    UntagResourceCommand,
    UpdateAccessControlConfigurationCommand,
    UpdateDataSourceCommand,
    UpdateExperienceCommand,
    UpdateFeaturedResultsSetCommand,
    UpdateIndexCommand,
    UpdateQuerySuggestionsBlockListCommand,
    UpdateQuerySuggestionsConfigCommand,
    UpdateThesaurusCommand,
};
class Kendra extends KendraClient {
}
smithyClient.createAggregatedClient(commands, Kendra);

const paginateGetSnapshots = core.createPaginator(KendraClient, GetSnapshotsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListAccessControlConfigurations = core.createPaginator(KendraClient, ListAccessControlConfigurationsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListDataSourceSyncJobs = core.createPaginator(KendraClient, ListDataSourceSyncJobsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListDataSources = core.createPaginator(KendraClient, ListDataSourcesCommand, "NextToken", "NextToken", "MaxResults");

const paginateListEntityPersonas = core.createPaginator(KendraClient, ListEntityPersonasCommand, "NextToken", "NextToken", "MaxResults");

const paginateListExperienceEntities = core.createPaginator(KendraClient, ListExperienceEntitiesCommand, "NextToken", "NextToken", "");

const paginateListExperiences = core.createPaginator(KendraClient, ListExperiencesCommand, "NextToken", "NextToken", "MaxResults");

const paginateListFaqs = core.createPaginator(KendraClient, ListFaqsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListGroupsOlderThanOrderingId = core.createPaginator(KendraClient, ListGroupsOlderThanOrderingIdCommand, "NextToken", "NextToken", "MaxResults");

const paginateListIndices = core.createPaginator(KendraClient, ListIndicesCommand, "NextToken", "NextToken", "MaxResults");

const paginateListQuerySuggestionsBlockLists = core.createPaginator(KendraClient, ListQuerySuggestionsBlockListsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListThesauri = core.createPaginator(KendraClient, ListThesauriCommand, "NextToken", "NextToken", "MaxResults");

Object.defineProperty(exports, "$Command", {
    enumerable: true,
    get: function () { return smithyClient.Command; }
});
Object.defineProperty(exports, "__Client", {
    enumerable: true,
    get: function () { return smithyClient.Client; }
});
exports.AccessDeniedException = AccessDeniedException;
exports.AdditionalResultAttributeValueType = AdditionalResultAttributeValueType;
exports.AlfrescoEntity = AlfrescoEntity;
exports.AssociateEntitiesToExperienceCommand = AssociateEntitiesToExperienceCommand;
exports.AssociatePersonasToEntitiesCommand = AssociatePersonasToEntitiesCommand;
exports.AttributeSuggestionsMode = AttributeSuggestionsMode;
exports.BatchDeleteDocumentCommand = BatchDeleteDocumentCommand;
exports.BatchDeleteFeaturedResultsSetCommand = BatchDeleteFeaturedResultsSetCommand;
exports.BatchGetDocumentStatusCommand = BatchGetDocumentStatusCommand;
exports.BatchPutDocumentCommand = BatchPutDocumentCommand;
exports.ClearQuerySuggestionsCommand = ClearQuerySuggestionsCommand;
exports.ConditionOperator = ConditionOperator;
exports.ConflictException = ConflictException;
exports.ConfluenceAttachmentFieldName = ConfluenceAttachmentFieldName;
exports.ConfluenceAuthenticationType = ConfluenceAuthenticationType;
exports.ConfluenceBlogFieldName = ConfluenceBlogFieldName;
exports.ConfluencePageFieldName = ConfluencePageFieldName;
exports.ConfluenceSpaceFieldName = ConfluenceSpaceFieldName;
exports.ConfluenceVersion = ConfluenceVersion;
exports.ContentType = ContentType;
exports.CreateAccessControlConfigurationCommand = CreateAccessControlConfigurationCommand;
exports.CreateDataSourceCommand = CreateDataSourceCommand;
exports.CreateExperienceCommand = CreateExperienceCommand;
exports.CreateFaqCommand = CreateFaqCommand;
exports.CreateFeaturedResultsSetCommand = CreateFeaturedResultsSetCommand;
exports.CreateIndexCommand = CreateIndexCommand;
exports.CreateIndexRequestFilterSensitiveLog = CreateIndexRequestFilterSensitiveLog;
exports.CreateQuerySuggestionsBlockListCommand = CreateQuerySuggestionsBlockListCommand;
exports.CreateThesaurusCommand = CreateThesaurusCommand;
exports.DataSourceStatus = DataSourceStatus;
exports.DataSourceSyncJobStatus = DataSourceSyncJobStatus;
exports.DataSourceType = DataSourceType;
exports.DatabaseEngineType = DatabaseEngineType;
exports.DeleteAccessControlConfigurationCommand = DeleteAccessControlConfigurationCommand;
exports.DeleteDataSourceCommand = DeleteDataSourceCommand;
exports.DeleteExperienceCommand = DeleteExperienceCommand;
exports.DeleteFaqCommand = DeleteFaqCommand;
exports.DeleteIndexCommand = DeleteIndexCommand;
exports.DeletePrincipalMappingCommand = DeletePrincipalMappingCommand;
exports.DeleteQuerySuggestionsBlockListCommand = DeleteQuerySuggestionsBlockListCommand;
exports.DeleteThesaurusCommand = DeleteThesaurusCommand;
exports.DescribeAccessControlConfigurationCommand = DescribeAccessControlConfigurationCommand;
exports.DescribeDataSourceCommand = DescribeDataSourceCommand;
exports.DescribeExperienceCommand = DescribeExperienceCommand;
exports.DescribeFaqCommand = DescribeFaqCommand;
exports.DescribeFeaturedResultsSetCommand = DescribeFeaturedResultsSetCommand;
exports.DescribeIndexCommand = DescribeIndexCommand;
exports.DescribeIndexResponseFilterSensitiveLog = DescribeIndexResponseFilterSensitiveLog;
exports.DescribePrincipalMappingCommand = DescribePrincipalMappingCommand;
exports.DescribeQuerySuggestionsBlockListCommand = DescribeQuerySuggestionsBlockListCommand;
exports.DescribeQuerySuggestionsConfigCommand = DescribeQuerySuggestionsConfigCommand;
exports.DescribeThesaurusCommand = DescribeThesaurusCommand;
exports.DisassociateEntitiesFromExperienceCommand = DisassociateEntitiesFromExperienceCommand;
exports.DisassociatePersonasFromEntitiesCommand = DisassociatePersonasFromEntitiesCommand;
exports.DocumentAttributeValueType = DocumentAttributeValueType;
exports.DocumentStatus = DocumentStatus;
exports.EndpointType = EndpointType;
exports.EntityDisplayDataFilterSensitiveLog = EntityDisplayDataFilterSensitiveLog;
exports.EntityType = EntityType;
exports.ErrorCode = ErrorCode;
exports.ExperienceEntitiesSummaryFilterSensitiveLog = ExperienceEntitiesSummaryFilterSensitiveLog;
exports.ExperienceStatus = ExperienceStatus;
exports.FaqFileFormat = FaqFileFormat;
exports.FaqStatus = FaqStatus;
exports.FeaturedResultsConflictException = FeaturedResultsConflictException;
exports.FeaturedResultsSetStatus = FeaturedResultsSetStatus;
exports.FsxFileSystemType = FsxFileSystemType;
exports.GetQuerySuggestionsCommand = GetQuerySuggestionsCommand;
exports.GetSnapshotsCommand = GetSnapshotsCommand;
exports.HighlightType = HighlightType;
exports.IndexEdition = IndexEdition;
exports.IndexStatus = IndexStatus;
exports.InternalServerException = InternalServerException;
exports.Interval = Interval;
exports.InvalidRequestException = InvalidRequestException;
exports.IssueSubEntity = IssueSubEntity;
exports.Kendra = Kendra;
exports.KendraClient = KendraClient;
exports.KendraServiceException = KendraServiceException;
exports.KeyLocation = KeyLocation;
exports.ListAccessControlConfigurationsCommand = ListAccessControlConfigurationsCommand;
exports.ListDataSourceSyncJobsCommand = ListDataSourceSyncJobsCommand;
exports.ListDataSourcesCommand = ListDataSourcesCommand;
exports.ListEntityPersonasCommand = ListEntityPersonasCommand;
exports.ListExperienceEntitiesCommand = ListExperienceEntitiesCommand;
exports.ListExperienceEntitiesResponseFilterSensitiveLog = ListExperienceEntitiesResponseFilterSensitiveLog;
exports.ListExperiencesCommand = ListExperiencesCommand;
exports.ListFaqsCommand = ListFaqsCommand;
exports.ListFeaturedResultsSetsCommand = ListFeaturedResultsSetsCommand;
exports.ListGroupsOlderThanOrderingIdCommand = ListGroupsOlderThanOrderingIdCommand;
exports.ListIndicesCommand = ListIndicesCommand;
exports.ListQuerySuggestionsBlockListsCommand = ListQuerySuggestionsBlockListsCommand;
exports.ListTagsForResourceCommand = ListTagsForResourceCommand;
exports.ListThesauriCommand = ListThesauriCommand;
exports.MetricType = MetricType;
exports.MissingAttributeKeyStrategy = MissingAttributeKeyStrategy;
exports.Mode = Mode;
exports.Order = Order;
exports.Persona = Persona;
exports.PrincipalMappingStatus = PrincipalMappingStatus;
exports.PrincipalType = PrincipalType;
exports.PutPrincipalMappingCommand = PutPrincipalMappingCommand;
exports.QueryCommand = QueryCommand;
exports.QueryIdentifiersEnclosingOption = QueryIdentifiersEnclosingOption;
exports.QueryResultFormat = QueryResultFormat;
exports.QueryResultType = QueryResultType;
exports.QuerySuggestionsBlockListStatus = QuerySuggestionsBlockListStatus;
exports.QuerySuggestionsStatus = QuerySuggestionsStatus;
exports.ReadAccessType = ReadAccessType;
exports.RelevanceType = RelevanceType;
exports.ResourceAlreadyExistException = ResourceAlreadyExistException;
exports.ResourceInUseException = ResourceInUseException;
exports.ResourceNotFoundException = ResourceNotFoundException;
exports.ResourceUnavailableException = ResourceUnavailableException;
exports.RetrieveCommand = RetrieveCommand;
exports.SalesforceChatterFeedIncludeFilterType = SalesforceChatterFeedIncludeFilterType;
exports.SalesforceKnowledgeArticleState = SalesforceKnowledgeArticleState;
exports.SalesforceStandardObjectName = SalesforceStandardObjectName;
exports.ScoreConfidence = ScoreConfidence;
exports.ServerSideEncryptionConfigurationFilterSensitiveLog = ServerSideEncryptionConfigurationFilterSensitiveLog;
exports.ServiceNowAuthenticationType = ServiceNowAuthenticationType;
exports.ServiceNowBuildVersionType = ServiceNowBuildVersionType;
exports.ServiceQuotaExceededException = ServiceQuotaExceededException;
exports.SharePointOnlineAuthenticationType = SharePointOnlineAuthenticationType;
exports.SharePointVersion = SharePointVersion;
exports.SlackEntity = SlackEntity;
exports.SortOrder = SortOrder;
exports.StartDataSourceSyncJobCommand = StartDataSourceSyncJobCommand;
exports.StopDataSourceSyncJobCommand = StopDataSourceSyncJobCommand;
exports.SubmitFeedbackCommand = SubmitFeedbackCommand;
exports.SuggestionType = SuggestionType;
exports.TagResourceCommand = TagResourceCommand;
exports.ThesaurusStatus = ThesaurusStatus;
exports.ThrottlingException = ThrottlingException;
exports.Type = Type;
exports.UntagResourceCommand = UntagResourceCommand;
exports.UpdateAccessControlConfigurationCommand = UpdateAccessControlConfigurationCommand;
exports.UpdateDataSourceCommand = UpdateDataSourceCommand;
exports.UpdateExperienceCommand = UpdateExperienceCommand;
exports.UpdateFeaturedResultsSetCommand = UpdateFeaturedResultsSetCommand;
exports.UpdateIndexCommand = UpdateIndexCommand;
exports.UpdateQuerySuggestionsBlockListCommand = UpdateQuerySuggestionsBlockListCommand;
exports.UpdateQuerySuggestionsConfigCommand = UpdateQuerySuggestionsConfigCommand;
exports.UpdateThesaurusCommand = UpdateThesaurusCommand;
exports.UserContextPolicy = UserContextPolicy;
exports.UserGroupResolutionMode = UserGroupResolutionMode;
exports.ValidationException = ValidationException;
exports.WarningCode = WarningCode;
exports.WebCrawlerMode = WebCrawlerMode;
exports.paginateGetSnapshots = paginateGetSnapshots;
exports.paginateListAccessControlConfigurations = paginateListAccessControlConfigurations;
exports.paginateListDataSourceSyncJobs = paginateListDataSourceSyncJobs;
exports.paginateListDataSources = paginateListDataSources;
exports.paginateListEntityPersonas = paginateListEntityPersonas;
exports.paginateListExperienceEntities = paginateListExperienceEntities;
exports.paginateListExperiences = paginateListExperiences;
exports.paginateListFaqs = paginateListFaqs;
exports.paginateListGroupsOlderThanOrderingId = paginateListGroupsOlderThanOrderingId;
exports.paginateListIndices = paginateListIndices;
exports.paginateListQuerySuggestionsBlockLists = paginateListQuerySuggestionsBlockLists;
exports.paginateListThesauri = paginateListThesauri;
